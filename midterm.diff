Index: kstars/tools/avtplotwidget.h
===================================================================
--- kstars/tools/avtplotwidget.h	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/tools/avtplotwidget.h	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -23,56 +23,56 @@
 #include <kplotwidget.h>
 
 /**@class AVTPlotWidget
-	*@short An extension of the KPlotWidget for the AltVsTime tool.
-	*The biggest difference is that in addition to the plot objects, it 
-	*draws the "ground" below Alt=0 and draws the sky light blue for day 
-	*times, and black for night times.  The transition between day and 
-	*night is drawn with a gradient, and the position follows the actual 
-	*sunrise/sunset times of the given date/location.
-	*Also, this plot widget provides two time axes (local time along the 
-	*bottom, and local sideral time along the top).
-	*Finally, it provides user interaction: on mouse click, it draws 
-	*crosshairs at the mouse position with labels for the time and altitude.
-	*@version 1.0
-	*@author Jason Harris
-	*/
+    *@short An extension of the KPlotWidget for the AltVsTime tool.
+    *The biggest difference is that in addition to the plot objects, it 
+    *draws the "ground" below Alt=0 and draws the sky light blue for day 
+    *times, and black for night times.  The transition between day and 
+    *night is drawn with a gradient, and the position follows the actual 
+    *sunrise/sunset times of the given date/location.
+    *Also, this plot widget provides two time axes (local time along the 
+    *bottom, and local sideral time along the top).
+    *Finally, it provides user interaction: on mouse click, it draws 
+    *crosshairs at the mouse position with labels for the time and altitude.
+    *@version 1.0
+    *@author Jason Harris
+    */
 class AVTPlotWidget : public KPlotWidget
 {
     Q_OBJECT
 public:
     /**Constructor
-    	*/
+        */
     explicit AVTPlotWidget( QWidget *parent=0 );
 
     /**Set the fractional positions of the Sunrise and Sunset positions,
-    	*in units where last midnight was 0.0, and next midnight is 1.0.  
-    	*i.e., if Sunrise is at 06:00, then we set it as 0.25 in this 
-    	*function.  Likewise, if Sunset is at 18:00, then we set it as 
-    	*0.75 in this function.
-    	*@param sr the fractional position of Sunrise
-    	*@param ss the fractional position of Sunset
-    	*/
-    void setSunRiseSetTimes( double sr, double ss ) { SunRise = sr; SunSet = ss; }
+        *in units where last midnight was 0.0, and next midnight is 1.0.  
+        *i.e., if Sunrise is at 06:00, then we set it as 0.25 in this 
+        *function.  Likewise, if Sunset is at 18:00, then we set it as 
+        *0.75 in this function.
+        *@param sr the fractional position of Sunrise
+        *@param ss the fractional position of Sunset
+        */
+    void setSunRiseSetTimes( double sr, double ss ) { SunRise = sr; SunSet = ss; update(); }
 
 protected:
     /**Handle mouse move events.  If the mouse button is down,
-    	*draw crosshair lines centered at the cursor position.  This 
-    	*allows the user to pinpoint specific position sin the plot.
-    	*/
+        *draw crosshair lines centered at the cursor position.  This 
+        *allows the user to pinpoint specific position sin the plot.
+        */
     void mouseMoveEvent( QMouseEvent *e );
 
     /**
-    	*Simply calls mouseMoveEvent().
-    	*/
+        *Simply calls mouseMoveEvent().
+        */
     void mousePressEvent( QMouseEvent *e );
 
     /**
-    	*Reset the MousePoint to a null value, to erase the crosshairs
-    	*/
+        *Reset the MousePoint to a null value, to erase the crosshairs
+        */
     void mouseDoubleClickEvent( QMouseEvent *e );
 
     /**Redraw the plot.
-    	*/
+        */
     void paintEvent( QPaintEvent *e );
 
 private:
Index: kstars/tools/altvstime.h
===================================================================
--- kstars/tools/altvstime.h	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/tools/altvstime.h	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -24,6 +24,7 @@
 #include <QPaintEvent>
 
 #include "ui_altvstime.h"
+#include "ksalmanac.h"
 
 class KStarsDateTime;
 class QVBoxLayout;
@@ -41,124 +42,124 @@
 };
 
 /**@class AltVsTime
-	*@short the Altitude vs. Time Tool.
-	*Plot the altitude as a function of time for any list of 
-	*objects, as seen from any location, on any date.
-	*@version 1.0
-	*@author Jason Harris
-	*/
+    *@short the Altitude vs. Time Tool.
+    *Plot the altitude as a function of time for any list of 
+    *objects, as seen from any location, on any date.
+    *@version 1.0
+    *@author Jason Harris
+    */
 class AltVsTime : public KDialog
 {
     Q_OBJECT
 
 public:
     /**Constructor
-    	*/
+        */
     AltVsTime( QWidget* parent = 0);
 
     /**Destructor
-    	*/
+        */
     ~AltVsTime();
 
     /**Determine the limits for the sideral time axis, using
-    	*the sidereal time at midnight for the current date 
-    	*and location settings.
-    	*/
+        *the sidereal time at midnight for the current date 
+        *and location settings.
+        */
     void setLSTLimits();
 
     /**Set the AltVsTime Date according to the current Date
-    	*in the KStars main window.  Currently, this is only 
-    	*used in the ctor to initialize the Date.
-    	*/
+        *in the KStars main window.  Currently, this is only 
+        *used in the ctor to initialize the Date.
+        */
     void showCurrentDate ();
 
     /**@return a KStarsDateTime object constructed from the
-    	*current setting in the Date widget.
-    	*/
+        *current setting in the Date widget.
+        */
     KStarsDateTime getDate ();
 
     /**Determine the time of sunset and sunrise for the current
-    	*date and location settings.  Convert the times to doubles, 
-    	*expressing the times as fractions of a full day.
-    	*Calls AVTPlotWidget::setSunRiseSetTimes() to send the 
-    	*numbers to the plot widget.
-    	*/
+        *date and location settings.  Convert the times to doubles, 
+        *expressing the times as fractions of a full day.
+        *Calls AVTPlotWidget::setSunRiseSetTimes() to send the 
+        *numbers to the plot widget.
+        */
     void computeSunRiseSetTimes();
 
     /**Parse a string as an epoch number.  If the string can't
-    	*be parsed, return 2000.0.
-    	*@param eName the epoch string to be parsed
-    	*@return the epoch number
-    	*/
+        *be parsed, return 2000.0.
+        *@param eName the epoch string to be parsed
+        *@return the epoch number
+        */
     double getEpoch( const QString &eName );
 
     /**@short Add a SkyObject to the display.
-    	*Constructs a PLotObject representing the Alt-vs-time curve for the object.
-    	*@param o pointer to the SkyObject to be added
-    	*@param forceAdd if true, then the object will be added, even if there 
-    	*is already a curve for the same coordinates.
-    	*/
+        *Constructs a PLotObject representing the Alt-vs-time curve for the object.
+        *@param o pointer to the SkyObject to be added
+        *@param forceAdd if true, then the object will be added, even if there 
+        *is already a curve for the same coordinates.
+        */
     void processObject( SkyObject *o, bool forceAdd=false );
 
     /**@short Determine the altitude coordinate of a SkyPoint,
-    	*given an hour of the day.
-    	*
-    	*This is called for every 30-minute interval in the displayed Day, 
-    	*in order to construct the altitude curve for a given object.
-    	*@param p the skypoint whose altitude is to be found
-    	*@param hour the time in the displayed day, expressed in hours
-    	*@return the Altitude, expresse in degrees
-    	*/
+        *given an hour of the day.
+        *
+        *This is called for every 30-minute interval in the displayed Day, 
+        *in order to construct the altitude curve for a given object.
+        *@param p the skypoint whose altitude is to be found
+        *@param hour the time in the displayed day, expressed in hours
+        *@return the Altitude, expresse in degrees
+        */
     double findAltitude( SkyPoint *p, double hour );
 
     /**@return the currently highlighted item in the list of displayed
-    	*objects
-    	*/
+        *objects
+        */
     int currentPlotListItem() const;
 
     /**@return a pointer to the list of SkyObjects representing the
-    	*objects being displayed.
-    	*/
+        *objects being displayed.
+        */
     QList<SkyObject*>& skyPointList() { return pList; }
 
 public slots:
     /**@short Update the plot to reflec new Date and Location settings.
-    	*/
+        */
     void slotUpdateDateLoc();
 
     /**@short Clear the list of displayed objects.
-    	*/
+        */
     void slotClear();
 
     /**@short Clear the edit boxes for specifying a new object.
-    	*/
+        */
     void slotClearBoxes();
 
     /**@short Add an object to the list of displayed objects, according
-    	*to the data entered in the edit boxes.
-    	*/
+        *to the data entered in the edit boxes.
+        */
     void slotAddSource();
 
     /**@short Launch the Find Object window to select a new object for
-    	*the list of displayed objects.
-    	*/
+        *the list of displayed objects.
+        */
     void slotBrowseObject();
 
     /**@short Launch the Location dialog to choose a new location.
-    	*/
+        */
     void slotChooseCity();
 
     /**@short Move input keyboard focus to the next logical widget.
-    	*We need a separate slot for this because we are intercepting 
-    	*Enter key events, which close the window by default, to 
-    	*advance input focus instead (when the Enter events occur in 
-    	*certain Edit boxes).
-    	*/
+        *We need a separate slot for this because we are intercepting 
+        *Enter key events, which close the window by default, to 
+        *advance input focus instead (when the Enter events occur in 
+        *certain Edit boxes).
+        */
     void slotAdvanceFocus();
 
     /**Update the plot to highlight the altitude curve of the objects
-    	*which is highlighted in the listbox.
-    	*/
+        *which is highlighted in the listbox.
+        */
     void slotHighlight(int);
 
 private:
@@ -169,7 +170,7 @@
     KStars *ks;
     QList<SkyObject*> pList;
     QList<SkyObject*> deleteList;
-
+    KSAlmanac *ksal;
     int DayOffset;
     bool dirtyFlag;
 };
Index: kstars/tools/wutdialog.ui
===================================================================
--- kstars/tools/wutdialog.ui	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/tools/wutdialog.ui	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -1,26 +1,27 @@
-<ui version="4.0" >
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
  <class>WUTDialog</class>
- <widget class="QWidget" name="WUTDialog" >
-  <property name="geometry" >
+ <widget class="QWidget" name="WUTDialog">
+  <property name="geometry">
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>418</width>
-    <height>426</height>
+    <width>458</width>
+    <height>520</height>
    </rect>
   </property>
-  <layout class="QVBoxLayout" >
+  <layout class="QVBoxLayout">
    <item>
-    <layout class="QGridLayout" >
-     <item row="0" column="0" >
-      <widget class="QLabel" name="DateLabel" >
-       <property name="minimumSize" >
+    <layout class="QGridLayout">
+     <item row="0" column="0">
+      <widget class="QLabel" name="DateLabel">
+       <property name="minimumSize">
         <size>
          <width>200</width>
          <height>0</height>
         </size>
        </property>
-       <property name="font" >
+       <property name="font">
         <font>
          <family>Sans Serif</family>
          <pointsize>9</pointsize>
@@ -31,33 +32,33 @@
          <strikeout>false</strikeout>
         </font>
        </property>
-       <property name="text" >
+       <property name="text">
         <string>The night of DATE</string>
        </property>
       </widget>
      </item>
-     <item row="0" column="1" >
-      <widget class="KPushButton" name="DateButton" >
-       <property name="toolTip" >
+     <item row="0" column="1">
+      <widget class="KPushButton" name="DateButton">
+       <property name="toolTip">
         <string>Choose a new date</string>
        </property>
-       <property name="whatsThis" >
-        <string>Press this button to select a new date for the "What's Up Tonight" tool.  Note that the date of the main window is not changed.</string>
+       <property name="whatsThis">
+        <string>Press this button to select a new date for the &quot;What's Up Tonight&quot; tool.  Note that the date of the main window is not changed.</string>
        </property>
-       <property name="text" >
+       <property name="text">
         <string>Change Date...</string>
        </property>
       </widget>
      </item>
-     <item row="1" column="0" >
-      <widget class="QLabel" name="LocationLabel" >
-       <property name="minimumSize" >
+     <item row="1" column="0">
+      <widget class="QLabel" name="LocationLabel">
+       <property name="minimumSize">
         <size>
          <width>200</width>
          <height>0</height>
         </size>
        </property>
-       <property name="font" >
+       <property name="font">
         <font>
          <family>Sans Serif</family>
          <pointsize>9</pointsize>
@@ -68,255 +69,267 @@
          <strikeout>false</strikeout>
         </font>
        </property>
-       <property name="frameShape" >
+       <property name="frameShape">
         <enum>QFrame::NoFrame</enum>
        </property>
-       <property name="frameShadow" >
+       <property name="frameShadow">
         <enum>QFrame::Plain</enum>
        </property>
-       <property name="text" >
+       <property name="text">
         <string>at LOCATION</string>
        </property>
       </widget>
      </item>
-     <item row="1" column="1" >
-      <widget class="KPushButton" name="LocationButton" >
-       <property name="toolTip" >
+     <item row="1" column="1">
+      <widget class="KPushButton" name="LocationButton">
+       <property name="toolTip">
         <string>Choose a new geographic location</string>
        </property>
-       <property name="whatsThis" >
-        <string>Press this button to select a new geographic location for the "What's Up Tonight" tool.  Note that the location of the main window is not changed.</string>
+       <property name="whatsThis">
+        <string>Press this button to select a new geographic location for the &quot;What's Up Tonight&quot; tool.  Note that the location of the main window is not changed.</string>
        </property>
-       <property name="text" >
+       <property name="text">
         <string>Change Location...</string>
        </property>
       </widget>
      </item>
-     <item row="2" column="0" >
-      <widget class="QLabel" name="textLabel14" >
-       <property name="sizePolicy" >
-        <sizepolicy vsizetype="Preferred" hsizetype="MinimumExpanding" >
+     <item row="2" column="0">
+      <widget class="QLabel" name="textLabel14">
+       <property name="sizePolicy">
+        <sizepolicy hsizetype="MinimumExpanding" vsizetype="Preferred">
          <horstretch>0</horstretch>
          <verstretch>0</verstretch>
         </sizepolicy>
        </property>
-       <property name="text" >
+       <property name="text">
         <string>Show objects which are up:</string>
        </property>
-       <property name="alignment" >
+       <property name="alignment">
         <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
        </property>
       </widget>
      </item>
-     <item row="2" column="1" >
-      <widget class="KComboBox" name="EveningMorningBox" >
-       <property name="sizePolicy" >
-        <sizepolicy vsizetype="Minimum" hsizetype="Preferred" >
+     <item row="2" column="1">
+      <widget class="KComboBox" name="EveningMorningBox">
+       <property name="sizePolicy">
+        <sizepolicy hsizetype="Preferred" vsizetype="Minimum">
          <horstretch>0</horstretch>
          <verstretch>0</verstretch>
         </sizepolicy>
        </property>
-       <property name="toolTip" >
+       <property name="toolTip">
         <string>Choose time interval</string>
        </property>
-       <property name="whatsThis" >
-        <string>By default, the "What's Up Tonight" tool displays all objects which are above the horizon between sunset and midnight (i.e., "in the evening").  You can also choose to show objects which are up between midnight and dawn (i.e., "in the morning"), or objects which are up at any time between sunset and sunrise (i.e., "any time tonight")</string>
+       <property name="whatsThis">
+        <string>By default, the &quot;What's Up Tonight&quot; tool displays all objects which are above the horizon between sunset and midnight (i.e., &quot;in the evening&quot;).  You can also choose to show objects which are up between midnight and dawn (i.e., &quot;in the morning&quot;), or objects which are up at any time between sunset and sunrise (i.e., &quot;any time tonight&quot;)</string>
        </property>
        <item>
-        <property name="text" >
+        <property name="text">
          <string>In the Evening</string>
         </property>
        </item>
        <item>
-        <property name="text" >
+        <property name="text">
          <string>In the Morning</string>
         </property>
        </item>
        <item>
-        <property name="text" >
+        <property name="text">
          <string>Any Time Tonight</string>
         </property>
        </item>
       </widget>
      </item>
+     <item row="3" column="0">
+      <widget class="QLabel" name="label">
+       <property name="text">
+        <string>Show objects brighter than magnitude:</string>
+       </property>
+       <property name="alignment">
+        <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
+       </property>
+      </widget>
+     </item>
+     <item row="3" column="1">
+      <layout class="QHBoxLayout" name="horizontalLayout">
+       <item>
+        <widget class="KDoubleNumInput" name="MagnitudeEdit">
+         <property name="minimum">
+          <double>-30.000000000000000</double>
+         </property>
+         <property name="maximum">
+          <double>30.000000000000000</double>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </item>
     </layout>
    </item>
    <item>
-    <widget class="QGroupBox" name="groupBox" >
-     <property name="sizePolicy" >
-      <sizepolicy vsizetype="Preferred" hsizetype="Preferred" >
+    <widget class="QGroupBox" name="groupBox">
+     <property name="sizePolicy">
+      <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
        <horstretch>0</horstretch>
        <verstretch>0</verstretch>
       </sizepolicy>
      </property>
-     <property name="title" >
+     <property name="title">
       <string>Almanac</string>
      </property>
-     <layout class="QGridLayout" >
-      <property name="leftMargin" >
+     <layout class="QGridLayout">
+      <property name="margin">
        <number>9</number>
       </property>
-      <property name="topMargin" >
-       <number>9</number>
-      </property>
-      <property name="rightMargin" >
-       <number>9</number>
-      </property>
-      <property name="bottomMargin" >
-       <number>9</number>
-      </property>
-      <property name="horizontalSpacing" >
+      <property name="spacing">
        <number>6</number>
       </property>
-      <property name="verticalSpacing" >
-       <number>6</number>
-      </property>
-      <item row="0" column="1" >
-       <widget class="QLabel" name="MoonRiseLabel" >
-        <property name="sizePolicy" >
-         <sizepolicy vsizetype="Preferred" hsizetype="Preferred" >
+      <item row="0" column="1">
+       <widget class="QLabel" name="MoonRiseLabel">
+        <property name="sizePolicy">
+         <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
           <horstretch>0</horstretch>
           <verstretch>0</verstretch>
          </sizepolicy>
         </property>
-        <property name="minimumSize" >
+        <property name="minimumSize">
          <size>
           <width>0</width>
           <height>20</height>
          </size>
         </property>
-        <property name="toolTip" >
+        <property name="toolTip">
          <string>Time of moon rise</string>
         </property>
-        <property name="whatsThis" >
+        <property name="whatsThis">
          <string>Displays the time at which the moon rises on the selected date.</string>
         </property>
-        <property name="text" >
+        <property name="text">
          <string>Moon rise:  13:19</string>
         </property>
        </widget>
       </item>
-      <item row="2" column="0" >
-       <widget class="QLabel" name="NightDurationLabel" >
-        <property name="sizePolicy" >
-         <sizepolicy vsizetype="Preferred" hsizetype="Preferred" >
+      <item row="2" column="0">
+       <widget class="QLabel" name="NightDurationLabel">
+        <property name="sizePolicy">
+         <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
           <horstretch>0</horstretch>
           <verstretch>0</verstretch>
          </sizepolicy>
         </property>
-        <property name="minimumSize" >
+        <property name="minimumSize">
          <size>
           <width>0</width>
           <height>20</height>
          </size>
         </property>
-        <property name="toolTip" >
+        <property name="toolTip">
          <string>Duration of night for selected date</string>
         </property>
-        <property name="whatsThis" >
+        <property name="whatsThis">
          <string>Displays the duration between sunset and sunrise for the selected date.</string>
         </property>
-        <property name="text" >
+        <property name="text">
          <string>Night duration: 11:00 hours</string>
         </property>
        </widget>
       </item>
-      <item row="1" column="0" >
-       <widget class="QLabel" name="SunSetLabel" >
-        <property name="sizePolicy" >
-         <sizepolicy vsizetype="Preferred" hsizetype="Preferred" >
+      <item row="1" column="0">
+       <widget class="QLabel" name="SunSetLabel">
+        <property name="sizePolicy">
+         <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
           <horstretch>0</horstretch>
           <verstretch>0</verstretch>
          </sizepolicy>
         </property>
-        <property name="minimumSize" >
+        <property name="minimumSize">
          <size>
           <width>0</width>
           <height>20</height>
          </size>
         </property>
-        <property name="toolTip" >
+        <property name="toolTip">
          <string>Time of sunset</string>
         </property>
-        <property name="whatsThis" >
+        <property name="whatsThis">
          <string>Displays the time of sunset for the selected date.</string>
         </property>
-        <property name="text" >
+        <property name="text">
          <string>Sunset:  19:15</string>
         </property>
        </widget>
       </item>
-      <item row="1" column="1" >
-       <widget class="QLabel" name="MoonSetLabel" >
-        <property name="sizePolicy" >
-         <sizepolicy vsizetype="Preferred" hsizetype="Preferred" >
+      <item row="1" column="1">
+       <widget class="QLabel" name="MoonSetLabel">
+        <property name="sizePolicy">
+         <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
           <horstretch>0</horstretch>
           <verstretch>0</verstretch>
          </sizepolicy>
         </property>
-        <property name="minimumSize" >
+        <property name="minimumSize">
          <size>
           <width>0</width>
           <height>20</height>
          </size>
         </property>
-        <property name="toolTip" >
+        <property name="toolTip">
          <string>Time of moon set</string>
         </property>
-        <property name="whatsThis" >
+        <property name="whatsThis">
          <string>Displays the time at which the moon sets on the selected date.</string>
         </property>
-        <property name="text" >
+        <property name="text">
          <string>Moon set: 04:27 </string>
         </property>
        </widget>
       </item>
-      <item row="0" column="0" >
-       <widget class="QLabel" name="SunRiseLabel" >
-        <property name="sizePolicy" >
-         <sizepolicy vsizetype="Preferred" hsizetype="Preferred" >
+      <item row="0" column="0">
+       <widget class="QLabel" name="SunRiseLabel">
+        <property name="sizePolicy">
+         <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
           <horstretch>0</horstretch>
           <verstretch>0</verstretch>
          </sizepolicy>
         </property>
-        <property name="minimumSize" >
+        <property name="minimumSize">
          <size>
           <width>0</width>
           <height>20</height>
          </size>
         </property>
-        <property name="toolTip" >
+        <property name="toolTip">
          <string>Time of sunrise</string>
         </property>
-        <property name="whatsThis" >
+        <property name="whatsThis">
          <string>Displays the time of sunrise for the selected date.</string>
         </property>
-        <property name="text" >
+        <property name="text">
          <string>Sunrise:  07:15</string>
         </property>
        </widget>
       </item>
-      <item row="2" column="1" >
-       <widget class="QLabel" name="MoonIllumLabel" >
-        <property name="sizePolicy" >
-         <sizepolicy vsizetype="Preferred" hsizetype="Preferred" >
+      <item row="2" column="1">
+       <widget class="QLabel" name="MoonIllumLabel">
+        <property name="sizePolicy">
+         <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
           <horstretch>0</horstretch>
           <verstretch>0</verstretch>
          </sizepolicy>
         </property>
-        <property name="minimumSize" >
+        <property name="minimumSize">
          <size>
           <width>0</width>
           <height>20</height>
          </size>
         </property>
-        <property name="toolTip" >
+        <property name="toolTip">
          <string>Moon's illumination fraction</string>
         </property>
-        <property name="whatsThis" >
+        <property name="whatsThis">
          <string>Displays the illumination fraction of the Moon for the selected date.</string>
         </property>
-        <property name="text" >
+        <property name="text">
          <string>Moon illum: 42%</string>
         </property>
        </widget>
@@ -325,10 +338,10 @@
     </widget>
    </item>
    <item>
-    <layout class="QGridLayout" >
-     <item row="0" column="0" >
-      <widget class="QLabel" name="textLabel15" >
-       <property name="font" >
+    <layout class="QGridLayout">
+     <item row="0" column="0">
+      <widget class="QLabel" name="textLabel15">
+       <property name="font">
         <font>
          <family>Sans Serif</family>
          <pointsize>10</pointsize>
@@ -339,14 +352,14 @@
          <strikeout>false</strikeout>
         </font>
        </property>
-       <property name="text" >
+       <property name="text">
         <string>Select a category:</string>
        </property>
       </widget>
      </item>
-     <item row="0" column="1" >
-      <widget class="QLabel" name="textLabel16" >
-       <property name="font" >
+     <item row="0" column="1">
+      <widget class="QLabel" name="textLabel16">
+       <property name="font">
         <font>
          <family>Sans Serif</family>
          <pointsize>10</pointsize>
@@ -357,20 +370,20 @@
          <strikeout>false</strikeout>
         </font>
        </property>
-       <property name="text" >
+       <property name="text">
         <string>Matching objects:</string>
        </property>
       </widget>
      </item>
-     <item row="0" column="2" >
+     <item row="0" column="2">
       <spacer>
-       <property name="orientation" >
+       <property name="orientation">
         <enum>Qt::Horizontal</enum>
        </property>
-       <property name="sizeType" >
+       <property name="sizeType">
         <enum>QSizePolicy::Expanding</enum>
        </property>
-       <property name="sizeHint" >
+       <property name="sizeHint" stdset="0">
         <size>
          <width>191</width>
          <height>21</height>
@@ -378,72 +391,63 @@
        </property>
       </spacer>
      </item>
-     <item row="1" column="2" >
-      <widget class="QGroupBox" name="ObjectBox" >
-       <property name="title" >
+     <item row="1" column="2">
+      <widget class="QGroupBox" name="ObjectBox">
+       <property name="title">
         <string>Object Name</string>
        </property>
-       <layout class="QVBoxLayout" >
-        <property name="spacing" >
+       <layout class="QVBoxLayout">
+        <property name="spacing">
          <number>6</number>
         </property>
-        <property name="leftMargin" >
+        <property name="margin">
          <number>9</number>
         </property>
-        <property name="topMargin" >
-         <number>9</number>
-        </property>
-        <property name="rightMargin" >
-         <number>9</number>
-        </property>
-        <property name="bottomMargin" >
-         <number>9</number>
-        </property>
         <item>
-         <widget class="QLabel" name="ObjectRiseLabel" >
-          <property name="whatsThis" >
+         <widget class="QLabel" name="ObjectRiseLabel">
+          <property name="whatsThis">
            <string>Displays the time at which the highlighted object rises above the horizon on the selected date.</string>
           </property>
-          <property name="text" >
+          <property name="text">
            <string>Rises at:  22:12</string>
           </property>
-          <property name="alignment" >
+          <property name="alignment">
            <set>Qt::AlignVCenter</set>
           </property>
          </widget>
         </item>
         <item>
-         <widget class="QLabel" name="ObjectTransitLabel" >
-          <property name="whatsThis" >
+         <widget class="QLabel" name="ObjectTransitLabel">
+          <property name="whatsThis">
            <string>Displays the time at which the highlighted object transits across the local meridian on the selected date.</string>
           </property>
-          <property name="text" >
+          <property name="text">
            <string>Transits at:  03:45</string>
           </property>
-          <property name="alignment" >
+          <property name="alignment">
            <set>Qt::AlignVCenter</set>
           </property>
          </widget>
         </item>
         <item>
-         <widget class="QLabel" name="ObjectSetLabel" >
-          <property name="whatsThis" >
+         <widget class="QLabel" name="ObjectSetLabel">
+          <property name="whatsThis">
            <string>Displays the time at which the highlighted object sets below the horizon on the selected date.</string>
           </property>
-          <property name="text" >
+          <property name="text">
            <string>Sets at:  08:22</string>
           </property>
-          <property name="alignment" >
+          <property name="alignment">
            <set>Qt::AlignVCenter</set>
           </property>
          </widget>
         </item>
         <item>
          <spacer>
-          <property name="orientation" >
+          <property name="orientation">
            <enum>Qt::Vertical</enum>
           </property>
-          <property name="sizeHint" >
+          <property name="sizeHint" stdset="0">
            <size>
             <width>20</width>
             <height>20</height>
@@ -452,48 +456,61 @@
          </spacer>
         </item>
         <item>
-         <widget class="KPushButton" name="CenterButton" >
-          <property name="toolTip" >
+         <widget class="KPushButton" name="CenterButton">
+          <property name="toolTip">
            <string>Center this object in the sky display</string>
           </property>
-          <property name="whatsThis" >
-           <string>Center the sky display on this object, and begin tracking it.  Equivalent to the "Center and Track" item in the popup menu.</string>
+          <property name="whatsThis">
+           <string>Center the sky display on this object, and begin tracking it.  Equivalent to the &quot;Center and Track&quot; item in the popup menu.</string>
           </property>
-          <property name="text" >
+          <property name="text">
            <string>Center Object</string>
           </property>
          </widget>
         </item>
         <item>
-         <widget class="KPushButton" name="DetailButton" >
-          <property name="toolTip" >
+         <widget class="KPushButton" name="DetailButton">
+          <property name="toolTip">
            <string>Open the Object Details window</string>
           </property>
-          <property name="whatsThis" >
+          <property name="whatsThis">
            <string>Open the Details window for the highlighted object.</string>
           </property>
-          <property name="text" >
+          <property name="text">
            <string>Object Details</string>
           </property>
          </widget>
         </item>
+        <item>
+         <widget class="KPushButton" name="ObslistButton">
+          <property name="toolTip">
+           <string>Adds the selected object to the Observing list</string>
+          </property>
+          <property name="whatsThis">
+           <string>Open the Details window for the highlighted object.</string>
+          </property>
+          <property name="text">
+           <string>Add to List</string>
+          </property>
+         </widget>
+        </item>
        </layout>
       </widget>
      </item>
-     <item row="1" column="0" >
-      <widget class="KListWidget" name="CategoryListWidget" >
-       <property name="sizePolicy" >
-        <sizepolicy vsizetype="Preferred" hsizetype="Preferred" >
+     <item row="1" column="0">
+      <widget class="KListWidget" name="CategoryListWidget">
+       <property name="sizePolicy">
+        <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
          <horstretch>0</horstretch>
          <verstretch>0</verstretch>
         </sizepolicy>
        </property>
       </widget>
      </item>
-     <item row="1" column="1" >
-      <widget class="KListWidget" name="ObjectListWidget" >
-       <property name="sizePolicy" >
-        <sizepolicy vsizetype="Preferred" hsizetype="Preferred" >
+     <item row="1" column="1">
+      <widget class="KListWidget" name="ObjectListWidget">
+       <property name="sizePolicy">
+        <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
          <horstretch>0</horstretch>
          <verstretch>0</verstretch>
         </sizepolicy>
@@ -506,20 +523,25 @@
  </widget>
  <customwidgets>
   <customwidget>
-   <class>KComboBox</class>
-   <extends>QComboBox</extends>
-   <header>kcombobox.h</header>
-  </customwidget>
-  <customwidget>
    <class>KListWidget</class>
    <extends>QListWidget</extends>
    <header>klistwidget.h</header>
   </customwidget>
   <customwidget>
+   <class>KDoubleNumInput</class>
+   <extends>QWidget</extends>
+   <header>knuminput.h</header>
+  </customwidget>
+  <customwidget>
    <class>KPushButton</class>
    <extends>QPushButton</extends>
    <header>kpushbutton.h</header>
   </customwidget>
+  <customwidget>
+   <class>KComboBox</class>
+   <extends>QComboBox</extends>
+   <header>kcombobox.h</header>
+  </customwidget>
  </customwidgets>
  <resources/>
  <connections/>
Index: kstars/tools/observinglist.h
===================================================================
--- kstars/tools/observinglist.h	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/tools/observinglist.h	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -20,172 +20,305 @@
 
 #include <QList>
 #include <QAbstractTableModel>
+
 #include <kdialog.h>
+#include <kio/copyjob.h>
 
+#include "ui_observinglist.h"
 #include "skyobjects/skyobject.h"
-#include "ui_observinglist.h"
+#include "kstarsdatetime.h"
+#include "geolocation.h"
+#include "ksalmanac.h"
+#include "imageviewer.h"
+#include "obslistpopupmenu.h"
 
+class KSAlmanac;
 class QSortFilterProxyModel;
 class QStandardItemModel;
 class KStars;
-
+class KStarsDateTime;
+class GeoLocation;
 class ObservingListUI : public QFrame, public Ui::ObservingList {
     Q_OBJECT
 
 public:
     /**@short Cunstructor
-    	*/
+        */
     ObservingListUI( QWidget *parent );
 };
 
 /**@class ObservingList
-	*Tool window for managing a custom list of objects.  The window
-	*displays the Name, RA, Dec, mag, and type of each object in the list.
-	*
-	*By selecting an object in the list, you can perform a number of functions
-	*on that object:
-	*+ Center it in the display 
-	*+ Examine its Details Window 
-	*+ Point the telescope at it 
-	*+ Attach a custom icon or name label (TBD)
-	*+ Attach a trail (solar system only) (TBD)
-	*+ Open the AltVsTime tool 
-	*
-	*The user can also save/load their observing lists, and can export 
-	*list data (TBD: as HTML table?  CSV format?  plain text?)
-	*
-	*The observing notes associated with the selected object are displayed 
-	*below the list. (TBD)
-	*
-	*TODO: 
-	*+ Implement a "shaded" state, in which the UI is compressed to
-	*  make it easier to float on the KStars window.  Displays only
-	*  object names, and single-letter action buttons, and no user log.
-	*+ Implement an InfoBox version (the ultimate shaded state)
-	*
-	*@short Tool for managing a custom list of objects
-	*@author Jeff Woods, Jason Harris
-	*@version 1.0
-	*/
+    *Tool window for managing a custom list of objects.  The window
+    *displays the Name, RA, Dec, mag, and type of each object in the list.
+    *
+    *By selecting an object in the list, you can perform a number of functions
+    *on that object:
+    *+ Center it in the display 
+    *+ Examine its Details Window 
+    *+ Point the telescope at it 
+    *+ Attach a custom icon or name label (TBD)
+    *+ Attach a trail (solar system only) (TBD)
+    *+ Open the AltVsTime tool 
+    *
+    *The user can also save/load their observing lists, and can export 
+    *list data (TBD: as HTML table?  CSV format?  plain text?)
+    *
+    *The observing notes associated with the selected object are displayed 
+    *below the list.
+    *
+    *TODO: 
+    *+ Implement a "shaded" state, in which the UI is compressed to
+    *  make it easier to float on the KStars window.  Displays only
+    *  object names, and single-letter action buttons, and no user log.
+    *+ Implement an InfoBox version (the ultimate shaded state)
+    *
+    *@short Tool for managing a custom list of objects
+    *@author Jeff Woods, Jason Harris
+    *@version 1.0
+    */
 
 class ObservingList : public KDialog
 {
     Q_OBJECT
 
 public:
-    /**@short Cunstructor
-    	*/
+    /**@short Constructor
+        */
     ObservingList( KStars *_ks );
     /**@short Destuctor (empty)
-    	*/
-    ~ObservingList() {}
+        */
+    ~ObservingList();
 
     /**@return true if the object is in the observing list
-    	*@p o pointer to the object to test.
-    	*/
-    bool contains( const SkyObject *o );
+        *@p o pointer to the object to test.
+        */
+    inline bool contains( SkyObject *o ) { return m_ObservingList.contains( o ); }
 
     /**@return true if the window is in its default "large" state.
-    	*/
+        */
     bool isLarge() const { return bIsLarge; }
 
     /**@return reference to the current observing list
-    	*/
+        */
     QList<SkyObject*>& obsList() { return m_ObservingList; }
+    
+    /**@return reference to the current observing list
+        */
+    QList<SkyObject*>& sessionList() { return m_SessionList; }
 
     /**@return pointer to the currently-selected object in the observing list
-    	*@note if more than one object is selected, this function returns 0.
-    	*/
+        *@note if more than one object is selected, this function returns 0.
+        */
     SkyObject *currentObject() const { return m_CurrentObject; }
 
     /**@short If the current list has unsaved changes, ask the user about saving it.
-    	*@note also clears the list in preparation of opening a new one
-    	*/
+        *@note also clears the list in preparation of opening a new one
+        */
     void saveCurrentList();
 
+    /**@short Plot the SkyObject's Altitude vs Time in the AVTPlotWidget.
+       *@p o pointer to the object to be plotted
+       */
+    void plot( SkyObject *o );
+    
+    /**@short Return the altitude of the given SkyObject for the given hour.
+        *@p p pointer to the SkyObject 
+        *@p hour time at which altitude has to be found
+        */
+    double findAltitude( SkyPoint *p, double hour=0);
+
+    /**@short Return the list of downloaded images
+        */
+    QList<QString> imageList() { return ImageList; }
+
+    /**@short Sets the image parameters for the current object
+        *@p o The passed object for setting the parameters
+        *@p temp A flag to edit the name for temporary images
+        */
+    void setCurrentImage( SkyObject *o, bool temp = false );
+
+    /**@short Save the user log text to a file.
+        *@note the log is attached to the current object in obsList.
+        */
+    void saveCurrentUserLog();
+
+    /**@short decides on whether to enable the SaveImages button or not
+        */
+    void setSaveImages();
+
+    bool eventFilter( QObject *obj, QEvent *event );
+
+    void saveThumbImage();
+
 public slots:
     /**@short add a new object to list
-    	*@p o pointer to the object to add to the list
-    	*/
-    void slotAddObject( SkyObject *o=NULL );
+        *@p o pointer to the object to add to the list
+        *@p session flag toggle adding the object to the session list
+        *@p update flag to toggle the call of slotSaveList
+        */
+    void slotAddObject( SkyObject *o=NULL, bool session=false, bool update=false );
 
     /**@short Remove skyobjects which are highlighted in the
-    	*observing list tool from the observing list.
-    	*/
+        *observing list tool from the observing list.
+        */
     void slotRemoveSelectedObjects();
 
     /**@short Remove skyobject from the observing list.
-    	*@p o pointer to the SkyObject to be removed.
-    	*Use SkyMap::clickedObject() if o is NULL (default)
-    	*/
-    void slotRemoveObject( SkyObject *o=NULL );
+        *@p o pointer to the SkyObject to be removed.
+        *@p session flag to tell it whether to remove the object
+        *from the sessionlist or from the wishlist
+        *@p update flag to toggle the call of slotSaveList
+        *Use SkyMap::clickedObject() if o is NULL (default)
+        */
+    void slotRemoveObject( SkyObject *o=NULL, bool session=false, bool update=false );
 
     /**@short center the selected object in the display
-    	*/
+        */
     void slotCenterObject();
 
     /**@short slew the telescope to the selected object
-    	*/
+        */
     void slotSlewToObject();
 
     /**@short Show the details window for the selected object
-    	*/
+        */
     void slotDetails();
 
-    /**@short Show the details window for the selected object
-    	*/
+    /**@short Show the Altitude vs Time for selecteld objects
+        */
     void slotAVT();
 
+    /**@short Open the WUT dialog
+    */
+    void slotWUT();
+    
+    /**@short Add the object to the Session List
+        */
+    void slotAddToSession();
+
+    /**@short Open the Find Dialog
+        */
+    void slotFind();
+
     /**@short Tasks needed when changing the selected object
-    	*Save the user log of the previous selected object, 
-    	*find the new selected object in the obsList, and 
-    	*show the notes associated with the new selected object
-    	*/
+        *Save the user log of the previous selected object, 
+        *find the new selected object in the obsList, and 
+        *show the notes associated with the new selected object
+        */
     void slotNewSelection();
 
-    //	void slotNewCurrent();
-
     /**@short load an observing list from disk.
-    	*/
+        */
     void slotOpenList();
 
     /**@short save the current observing list to disk.
-    	*/
+        */
     void slotSaveList();
 
-    /**@short save the current observing list to disk, specify filename.
-    	*/
-    void slotSaveListAs();
+    /**@short Load the Wish list from disk.
+        */
+    void slotLoadWishList();
 
+    /**@short save the current observing session plan to disk, specify filename.
+        */
+    void slotSaveSessionAs();
+
+    /**@short save the current session
+        */
+    void slotSaveSession();
+
     /**@short construct a new observing list using the wizard.
-    	*/
+        */
     void slotWizard();
 
     /**@short toggle between the large and small window states
-    	*/
+        */
     void slotToggleSize();
 
-    /**@short Save the user log text to a file.
-    	*@note the log is attached to the current object in obsList.
-    	*/
-    void saveCurrentUserLog();
+    /**@short toggle the setEnabled flags according to current view
+        *set the m_currentItem to NULL and clear selections
+        *@p index captures the integer value sent by the signal
+        *which is the currentIndex of the table
+        */
+    void slotChangeTab(int index);
 
+    /**@short Opens the Location dialog to set the GeoLocation
+        *for the sessionlist.
+        */
+    void slotLocation();
+
+    /**@short Updates the tableviews for the new geolocation and date 
+        */
+    void slotUpdate();
+
+    /**@short Takes the time from the QTimeEdit box and sets it as the
+        *time parameter in the tableview of the SessionList.
+        */
+    void slotSetTime();
+
+    /**@short Downloads the corresponding DSS or SDSS image from the web and
+        *displays it
+        */
+    void slotGetImage( bool _dss = false );
+
+    void slotGoogleImage();
+
+    /**@short Downloads the images of all the objects in the session list
+        *Note: This downloads the SDSS image, checks if the size is > default image
+        *and gets the DSS image if thats the case
+        */
+    void slotSaveImages();
+    
+    /**@short saves the image syncronously from a given URL into a given file
+        *@p url the url from whih the image has to be downloaded
+        *@p filename the file onto which the url has to be copied to
+        *NOTE: This is not a generic image saver, it is specific to the current object
+        */
+    void saveImage( KUrl url , QString filename );
+
+    /**@short saves the temporary image permanently
+        */
+    void slotSaveImage();
+
+    /**@short Shows the image in a ImageViewer window.
+        */
+    void slotImageViewer();
+
+    /**@short Remove the current image
+        */
+    void slotDeleteImage();
+
+    /**@short Removes all the save DSS/SDSS images from the disk.
+        */
+    void slotDeleteImages();
+
+    /**@short download the DSS image and show it
+        */
+    void slotDSS() { slotGetImage( true ); }
+
 protected slots:
     void slotClose();
+    void downloadReady();
 
 private:
     KStars *ks;
+    KSAlmanac *ksal;
     ObservingListUI *ui;
-    QList<SkyObject*> m_ObservingList;
-//    QList<SkyObject*> m_SelectedObjects;
+    QList<SkyObject*> m_ObservingList, m_SessionList;
     SkyObject *LogObject, *m_CurrentObject;
     uint noNameStars;
-
-    bool isModified, bIsLarge;
-    QString ListName, FileName;
-
-    QStandardItemModel *m_Model;
-    QSortFilterProxyModel *m_SortModel;
+    bool isModified, bIsLarge, sessionView, dss, singleSelection, showScope, noSelection;
+    QString FileName, SessionName, CurrentImage, DSSUrl, SDSSUrl, ThumbImage, CurrentImagePath, CurrentTempPath;
+    char decsgn;
+    KStarsDateTime dt;
+    GeoLocation *geo;
+    QStandardItemModel *m_Model, *m_Session;
+    QSortFilterProxyModel *m_SortModel, *m_SortModelSession;
+    KIO::Job *downloadJob;  // download job of image -> 0 == no job is running
+    QHash<QString, QTime> TimeHash; 
+    QList<QString> ImageList;
+    QList<ImageViewer*> ivList;
+    ObsListPopupMenu *pmenu; 
 };
 
 #endif // OBSERVINGLIST_H_
Index: kstars/tools/calendarwidget.cpp
===================================================================
--- kstars/tools/calendarwidget.cpp	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/tools/calendarwidget.cpp	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -24,6 +24,7 @@
 #include "kstarsdata.h"
 #include "skyobjects/kssun.h"
 #include "skycalendar.h"
+#include "ksalmanac.h"
 
 #define XPADDING 20
 #define YPADDING 20
@@ -73,15 +74,21 @@
     
     QPolygonF polySunRise;
     QPolygonF polySunSet;
-
+    KSAlmanac *ksal =KSAlmanac::Instance() ;
     //Add points along curved edge of horizon polygons
     int imonth = -1;
     float rTime, sTime;
     while ( y == kdt.date().year() ) {
         float t = float( kdt.date().daysInYear() - kdt.date().dayOfYear() );
-        rTime = sun->riseSetTime( kdt.djd() + 1.0, data->geo(), true, true ).secsTo(QTime())*-24.0/86400.0;
-        sTime = sun->riseSetTime( kdt.djd(), data->geo(), false, true  ).secsTo(QTime())*-24.0/86400.0 - 24.0;
-
+        ksal->setDate(&kdt);
+        ksal->setLocation(data->geo());
+        rTime = ksal->getSunRise()*24.0;
+        sTime = ksal->getSunSet()*24.0 -24.0;
+//        kDebug()<<rTime<<" "<<sTime;
+//        rTime = sun->riseSetTime( kdt.djd() + 1.0, data->geo(), true, true ).secsTo(QTime())*-24.0/86400.0;
+//        sTime = sun->riseSetTime( kdt.djd(), data->geo(), false, true  ).secsTo(QTime())*-24.0/86400.0 - 24.0;
+//        kDebug()<<rTime<<" "<<sTime;
+//        FIXME why do the above two give different values ? ( Difference < 1 min though )
         if ( kdt.date().month() != imonth ) {
             riseTimeList.append( rTime );
             setTimeList.append( sTime );
Index: kstars/tools/wutdialog.h
===================================================================
--- kstars/tools/wutdialog.h	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/tools/wutdialog.h	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -37,67 +37,78 @@
 };
 
 /**@class WUTDialog
-	*What's up tonight dialog is a window which lists all skyobjects that will
-	*be visible during the next night.
-	*@author Thomas Kabelmann
-	*@version 1.0
-	*/
+    *What's up tonight dialog is a window which lists all skyobjects that will
+    *be visible during the next night.
+    *@author Thomas Kabelmann
+    *@version 1.0
+    */
 class WUTDialog : public KDialog  {
     Q_OBJECT
 
 public:
 
     /**@short Constructor*/
-    WUTDialog(KStars *ks);
+    WUTDialog(KStars *ks, bool session = false);
     /**@short Destructor*/
     ~WUTDialog();
 
 private slots:
 
     /**@short Load the list of visible objects for selected object type.
-    	*@p category the string describing the type of object
-    	*/
+        *@p category the string describing the type of object
+        */
     void slotLoadList(const QString &category);
 
     /**@short Determine which objects are visible, and store them in
-    	*an array of lists, classified by object type 
-    	*/
+        *an array of lists, classified by object type 
+        */
     void init();
 
     /**@short display the rise/transit/set times for selected object
-    	*/
+        */
     void slotDisplayObject(const QString &name);
 
     /**@short Apply user's choice of what part of the night should
-    	*be examined:
-    	*@li 0: Evening only (sunset to midnight)
-    	*@li 1: Morning only (midnight to sunrise)
-    	*@li 2: All night (sunset to sunrise)
-    	*/
+        *be examined:
+        *@li 0: Evening only (sunset to midnight)
+        *@li 1: Morning only (midnight to sunrise)
+        *@li 2: All night (sunset to sunrise)
+        */
     void slotEveningMorning( int flag );
 
     /**@short Adjust the date for the WUT tool
-    	*@note this does NOT affect the date of the sky map 
-    	*/
+        *@note this does NOT affect the date of the sky map 
+        */
     void slotChangeDate();
 
     /**@short Adjust the geographic location for the WUT tool
-    	*@note this does NOT affect the geographic location for the sky map
-    	*/
+        *@note this does NOT affect the geographic location for the sky map
+        */
     void slotChangeLocation();
 
     /**@short open the detail dialog for the current object
-    	*/
+        */
     void slotDetails();
 
     /**@short center the display on the current object
-    	*/
+        */
     void slotCenter();
+
+    /**@short Add the object to the observing list
+        */
+    void slotObslist();
+
+    /**@short Filters the objects displayed by Magnitude
+        */
+    void slotChangeMagnitude();
+
+    void updateMag();
+
 private:
 
     KStars *kstars;
     WUTDialogUI *WUT;
-
+    bool session;
     QList<SkyObject*>& visibleObjects( const QString &category );
     bool isCategoryInitialized( const QString &category );
 
@@ -108,9 +119,9 @@
     void initCategories();
 
     /**@short Check visibility of object
-    	*@p o the object to check
-    	*@return true if visible
-    	*/
+        *@p o the object to check
+        *@return true if visible
+        */
     bool checkVisibility(SkyObject *o);
 
     QTime sunRiseTomorrow, sunSetToday, sunRiseToday, moonRise, moonSet;
@@ -118,6 +129,8 @@
 
     GeoLocation *geo;
     int EveningFlag;
+    double m_Mag;
+    QTimer *timer;
 
     QStringList m_Categories;
     QHash< QString, QList< SkyObject* > > m_VisibleList;
Index: kstars/tools/observinglist.ui
===================================================================
--- kstars/tools/observinglist.ui	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/tools/observinglist.ui	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -1,180 +1,175 @@
-<ui version="4.0" >
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
  <class>ObservingList</class>
- <widget class="QWidget" name="ObservingList" >
-  <property name="geometry" >
+ <widget class="QWidget" name="ObservingList">
+  <property name="geometry">
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>415</width>
-    <height>491</height>
+    <width>861</width>
+    <height>650</height>
    </rect>
   </property>
-  <layout class="QVBoxLayout" >
-   <property name="spacing" >
+  <property name="sizePolicy">
+   <sizepolicy hsizetype="Preferred" vsizetype="Minimum">
+    <horstretch>0</horstretch>
+    <verstretch>0</verstretch>
+   </sizepolicy>
+  </property>
+  <property name="minimumSize">
+   <size>
+    <width>820</width>
+    <height>650</height>
+   </size>
+  </property>
+  <layout class="QVBoxLayout">
+   <property name="spacing">
     <number>6</number>
    </property>
-   <property name="leftMargin" >
+   <property name="margin">
     <number>9</number>
    </property>
-   <property name="topMargin" >
-    <number>9</number>
-   </property>
-   <property name="rightMargin" >
-    <number>9</number>
-   </property>
-   <property name="bottomMargin" >
-    <number>9</number>
-   </property>
    <item>
-    <layout class="QHBoxLayout" >
-     <property name="spacing" >
+    <layout class="QHBoxLayout">
+     <property name="spacing">
       <number>6</number>
      </property>
-     <property name="leftMargin" >
+     <property name="margin">
       <number>0</number>
      </property>
-     <property name="topMargin" >
-      <number>0</number>
-     </property>
-     <property name="rightMargin" >
-      <number>0</number>
-     </property>
-     <property name="bottomMargin" >
-      <number>0</number>
-     </property>
      <item>
-      <widget class="KPushButton" name="OpenButton" >
-       <property name="sizePolicy" >
-        <sizepolicy vsizetype="Fixed" hsizetype="Fixed" >
+      <widget class="KPushButton" name="OpenButton">
+       <property name="sizePolicy">
+        <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
          <horstretch>0</horstretch>
          <verstretch>0</verstretch>
         </sizepolicy>
        </property>
-       <property name="minimumSize" >
+       <property name="minimumSize">
         <size>
          <width>32</width>
          <height>32</height>
         </size>
        </property>
-       <property name="maximumSize" >
+       <property name="maximumSize">
         <size>
          <width>32</width>
          <height>32</height>
         </size>
        </property>
-       <property name="toolTip" >
-        <string>Open observing list</string>
+       <property name="toolTip">
+        <string>Open an observation session list</string>
        </property>
-       <property name="whatsThis" >
+       <property name="whatsThis">
         <string>Load an observing list from disk</string>
        </property>
-       <property name="text" >
+       <property name="text">
         <string/>
        </property>
       </widget>
      </item>
      <item>
-      <widget class="KPushButton" name="SaveButton" >
-       <property name="sizePolicy" >
-        <sizepolicy vsizetype="Fixed" hsizetype="Fixed" >
+      <widget class="KPushButton" name="SaveButton">
+       <property name="sizePolicy">
+        <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
          <horstretch>0</horstretch>
          <verstretch>0</verstretch>
         </sizepolicy>
        </property>
-       <property name="minimumSize" >
+       <property name="minimumSize">
         <size>
          <width>32</width>
          <height>32</height>
         </size>
        </property>
-       <property name="maximumSize" >
+       <property name="maximumSize">
         <size>
          <width>32</width>
          <height>32</height>
         </size>
        </property>
-       <property name="toolTip" >
-        <string>Save observing list</string>
+       <property name="toolTip">
+        <string>Save the observing session</string>
        </property>
-       <property name="whatsThis" >
+       <property name="whatsThis">
         <string>Save the current observing list to disk</string>
        </property>
-       <property name="text" >
+       <property name="text">
         <string/>
        </property>
       </widget>
      </item>
      <item>
-      <widget class="KPushButton" name="SaveAsButton" >
-       <property name="sizePolicy" >
-        <sizepolicy vsizetype="Fixed" hsizetype="Fixed" >
+      <widget class="KPushButton" name="SaveAsButton">
+       <property name="sizePolicy">
+        <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
          <horstretch>0</horstretch>
          <verstretch>0</verstretch>
         </sizepolicy>
        </property>
-       <property name="minimumSize" >
+       <property name="minimumSize">
         <size>
          <width>32</width>
          <height>32</height>
         </size>
        </property>
-       <property name="maximumSize" >
+       <property name="maximumSize">
         <size>
          <width>32</width>
          <height>32</height>
         </size>
        </property>
-       <property name="toolTip" >
-        <string>Save observing list as...</string>
+       <property name="toolTip">
+        <string>Save observing session as...</string>
        </property>
-       <property name="whatsThis" >
+       <property name="whatsThis">
         <string>Save the current observing list to disk, specifying the filename</string>
        </property>
-       <property name="text" >
+       <property name="text">
         <string/>
        </property>
       </widget>
      </item>
      <item>
-      <widget class="KPushButton" name="WizardButton" >
-       <property name="sizePolicy" >
-        <sizepolicy vsizetype="Fixed" hsizetype="Fixed" >
+      <widget class="KPushButton" name="WizardButton">
+       <property name="sizePolicy">
+        <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
          <horstretch>0</horstretch>
          <verstretch>0</verstretch>
         </sizepolicy>
        </property>
-       <property name="minimumSize" >
+       <property name="minimumSize">
         <size>
          <width>32</width>
          <height>32</height>
         </size>
        </property>
-       <property name="maximumSize" >
+       <property name="maximumSize">
         <size>
          <width>32</width>
          <height>32</height>
         </size>
        </property>
-       <property name="toolTip" >
+       <property name="toolTip">
         <string>Observing List Wizard</string>
        </property>
-       <property name="whatsThis" >
+       <property name="whatsThis">
         <string>The list wizard helps you construct observing lists based on filtering by object type, position on the sky, and magnitude.</string>
        </property>
-       <property name="text" >
+       <property name="text">
         <string/>
        </property>
       </widget>
      </item>
      <item>
-      <spacer>
-       <property name="orientation" >
+      <spacer name="Spacer1">
+       <property name="orientation">
         <enum>Qt::Horizontal</enum>
        </property>
-       <property name="sizeType" >
+       <property name="sizeType">
         <enum>QSizePolicy::Expanding</enum>
        </property>
-       <property name="sizeHint" >
+       <property name="sizeHint" stdset="0">
         <size>
          <width>40</width>
          <height>20</height>
@@ -183,32 +178,32 @@
       </spacer>
      </item>
      <item>
-      <widget class="KPushButton" name="MiniButton" >
-       <property name="sizePolicy" >
-        <sizepolicy vsizetype="Fixed" hsizetype="Fixed" >
+      <widget class="KPushButton" name="MiniButton">
+       <property name="sizePolicy">
+        <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
          <horstretch>0</horstretch>
          <verstretch>0</verstretch>
         </sizepolicy>
        </property>
-       <property name="minimumSize" >
+       <property name="minimumSize">
         <size>
          <width>32</width>
          <height>32</height>
         </size>
        </property>
-       <property name="maximumSize" >
+       <property name="maximumSize">
         <size>
          <width>32</width>
          <height>32</height>
         </size>
        </property>
-       <property name="toolTip" >
+       <property name="toolTip">
         <string>Make window small</string>
        </property>
-       <property name="whatsThis" >
+       <property name="whatsThis">
         <string>This button toggles between large and small states.  The small state may be useful if you want the Observing list open while working in the main window.</string>
        </property>
-       <property name="text" >
+       <property name="text">
         <string/>
        </property>
       </widget>
@@ -216,166 +211,348 @@
     </layout>
    </item>
    <item>
-    <layout class="QHBoxLayout" >
-     <property name="spacing" >
-      <number>6</number>
-     </property>
-     <property name="leftMargin" >
+    <layout class="QHBoxLayout" name="horizontalLayout_2">
+     <property name="topMargin">
       <number>0</number>
      </property>
-     <property name="topMargin" >
-      <number>0</number>
-     </property>
-     <property name="rightMargin" >
-      <number>0</number>
-     </property>
-     <property name="bottomMargin" >
-      <number>0</number>
-     </property>
      <item>
-      <widget class="KPushButton" name="CenterButton" >
-       <property name="sizePolicy" >
-        <sizepolicy vsizetype="Fixed" hsizetype="Minimum" >
-         <horstretch>0</horstretch>
-         <verstretch>0</verstretch>
-        </sizepolicy>
+      <widget class="QPushButton" name="SetLocation">
+       <property name="text">
+        <string>Set Location</string>
        </property>
-       <property name="toolTip" >
-        <string>Center sky map on highlighted object</string>
+      </widget>
+     </item>
+     <item>
+      <widget class="QDateEdit" name="DateEdit"/>
+     </item>
+     <item>
+      <widget class="QPushButton" name="Update">
+       <property name="toolTip">
+        <string>Update the table and the plot for the new date and location.</string>
        </property>
-       <property name="whatsThis" >
-        <string>Center the sky map on the highlighted object in the list</string>
+       <property name="text">
+        <string>Update</string>
        </property>
-       <property name="text" >
-        <string>Ce&amp;nter</string>
-       </property>
       </widget>
      </item>
      <item>
-      <widget class="KPushButton" name="ScopeButton" >
-       <property name="sizePolicy" >
-        <sizepolicy vsizetype="Fixed" hsizetype="Minimum" >
+      <widget class="KPushButton" name="FindButton">
+       <property name="sizePolicy">
+        <sizepolicy hsizetype="Minimum" vsizetype="Fixed">
          <horstretch>0</horstretch>
          <verstretch>0</verstretch>
         </sizepolicy>
        </property>
-       <property name="toolTip" >
-        <string>Point telescope at highlighted object</string>
+       <property name="toolTip">
+        <string>Open FindDialog</string>
        </property>
-       <property name="whatsThis" >
-        <string>Point the telescope at the highlighted object in the list</string>
+       <property name="whatsThis">
+        <string>Open the FindDialog for adding objects to the list</string>
        </property>
-       <property name="text" >
-        <string>Scope</string>
+       <property name="text">
+        <string>Add Object</string>
        </property>
-       <property name="shortcut" >
-        <string/>
-       </property>
       </widget>
      </item>
      <item>
-      <widget class="KPushButton" name="DetailsButton" >
-       <property name="sizePolicy" >
-        <sizepolicy vsizetype="Fixed" hsizetype="Minimum" >
+      <widget class="KPushButton" name="WUTButton">
+       <property name="sizePolicy">
+        <sizepolicy hsizetype="Minimum" vsizetype="Fixed">
          <horstretch>0</horstretch>
          <verstretch>0</verstretch>
         </sizepolicy>
        </property>
-       <property name="toolTip" >
-        <string>Show details for highlighted object</string>
+       <property name="toolTip">
+        <string>Open the WUT dialog</string>
        </property>
-       <property name="whatsThis" >
-        <string>Open the Details window for the highlighted object</string>
+       <property name="whatsThis">
+        <string>Opens the What's up tonight dialog, from which objects can be added to the list</string>
        </property>
-       <property name="text" >
-        <string>Details</string>
+       <property name="text">
+        <string>WUT</string>
        </property>
-       <property name="shortcut" >
-        <string/>
+      </widget>
+     </item>
+     <item>
+      <widget class="QPushButton" name="DeleteImages">
+       <property name="toolTip">
+        <string>Deletes all the stored DSS/SDSS images</string>
        </property>
+       <property name="text">
+        <string>Delete all Images</string>
+       </property>
       </widget>
      </item>
      <item>
-      <widget class="KPushButton" name="AVTButton" >
-       <property name="sizePolicy" >
-        <sizepolicy vsizetype="Fixed" hsizetype="Minimum" >
+      <widget class="QPushButton" name="saveImages">
+       <property name="toolTip">
+        <string>Download the SDSS/DSS images of all the objects in the current list.</string>
+       </property>
+       <property name="text">
+        <string>Save all Images</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <spacer name="horizontalSpacer_2">
+       <property name="orientation">
+        <enum>Qt::Horizontal</enum>
+       </property>
+       <property name="sizeHint" stdset="0">
+        <size>
+         <width>40</width>
+         <height>20</height>
+        </size>
+       </property>
+      </spacer>
+     </item>
+    </layout>
+   </item>
+   <item>
+    <widget class="QTabWidget" name="tabWidget">
+     <property name="sizePolicy">
+      <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
+       <horstretch>0</horstretch>
+       <verstretch>0</verstretch>
+      </sizepolicy>
+     </property>
+     <property name="minimumSize">
+      <size>
+       <width>0</width>
+       <height>202</height>
+      </size>
+     </property>
+     <property name="currentIndex">
+      <number>0</number>
+     </property>
+     <widget class="QWidget" name="WishList">
+      <attribute name="title">
+       <string>Wish List</string>
+      </attribute>
+      <layout class="QVBoxLayout">
+       <item>
+        <widget class="QTableView" name="TableView">
+         <property name="sizePolicy">
+          <sizepolicy hsizetype="Expanding" vsizetype="Preferred">
+           <horstretch>0</horstretch>
+           <verstretch>0</verstretch>
+          </sizepolicy>
+         </property>
+         <property name="editTriggers">
+          <set>QAbstractItemView::NoEditTriggers</set>
+         </property>
+         <property name="alternatingRowColors">
+          <bool>true</bool>
+         </property>
+         <property name="selectionBehavior">
+          <enum>QAbstractItemView::SelectRows</enum>
+         </property>
+         <property name="showGrid">
+          <bool>false</bool>
+         </property>
+         <property name="sortingEnabled">
+          <bool>true</bool>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </widget>
+     <widget class="QWidget" name="Session">
+      <attribute name="title">
+       <string>Session Plan</string>
+      </attribute>
+      <layout class="QHBoxLayout">
+       <item>
+        <widget class="QTableView" name="SessionView">
+         <property name="editTriggers">
+          <set>QAbstractItemView::NoEditTriggers</set>
+         </property>
+         <property name="alternatingRowColors">
+          <bool>true</bool>
+         </property>
+         <property name="selectionBehavior">
+          <enum>QAbstractItemView::SelectRows</enum>
+         </property>
+         <property name="showGrid">
+          <bool>false</bool>
+         </property>
+         <property name="sortingEnabled">
+          <bool>true</bool>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <layout class="QVBoxLayout">
+         <item>
+          <spacer name="verticalSpacer">
+           <property name="orientation">
+            <enum>Qt::Vertical</enum>
+           </property>
+           <property name="sizeHint" stdset="0">
+            <size>
+             <width>20</width>
+             <height>40</height>
+            </size>
+           </property>
+          </spacer>
+         </item>
+         <item>
+          <widget class="QLabel" name="label">
+           <property name="text">
+            <string>Scheduled Time</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QTimeEdit" name="TimeEdit">
+           <property name="sizePolicy">
+            <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
+             <horstretch>0</horstretch>
+             <verstretch>0</verstretch>
+            </sizepolicy>
+           </property>
+           <property name="maximumSize">
+            <size>
+             <width>100</width>
+             <height>30</height>
+            </size>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QPushButton" name="SetTime">
+           <property name="text">
+            <string>Set Time</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <spacer name="verticalSpacer_3">
+           <property name="orientation">
+            <enum>Qt::Vertical</enum>
+           </property>
+           <property name="sizeHint" stdset="0">
+            <size>
+             <width>20</width>
+             <height>40</height>
+            </size>
+           </property>
+          </spacer>
+         </item>
+        </layout>
+       </item>
+      </layout>
+     </widget>
+    </widget>
+   </item>
+   <item>
+    <layout class="QHBoxLayout" name="Preview">
+     <property name="topMargin">
+      <number>0</number>
+     </property>
+     <item>
+      <widget class="AVTPlotWidget" name="View">
+       <property name="enabled">
+        <bool>true</bool>
+       </property>
+       <property name="sizePolicy">
+        <sizepolicy hsizetype="Fixed" vsizetype="Preferred">
          <horstretch>0</horstretch>
          <verstretch>0</verstretch>
         </sizepolicy>
        </property>
-       <property name="toolTip" >
-        <string>Show altitude plot</string>
+       <property name="minimumSize">
+        <size>
+         <width>350</width>
+         <height>200</height>
+        </size>
        </property>
-       <property name="whatsThis" >
-        <string>Open the Altitude vs. Time tool, with curves for the highlighted objects shown</string>
+       <property name="maximumSize">
+        <size>
+         <width>350</width>
+         <height>200</height>
+        </size>
        </property>
-       <property name="text" >
-        <string>&amp;Alt vs Time</string>
+       <property name="cursor">
+        <cursorShape>CrossCursor</cursorShape>
        </property>
       </widget>
      </item>
      <item>
-      <widget class="KPushButton" name="RemoveButton" >
-       <property name="sizePolicy" >
-        <sizepolicy vsizetype="Fixed" hsizetype="Minimum" >
+      <widget class="KSeparator" name="kseparator">
+       <property name="sizePolicy">
+        <sizepolicy hsizetype="Minimum" vsizetype="Preferred">
          <horstretch>0</horstretch>
          <verstretch>0</verstretch>
         </sizepolicy>
        </property>
-       <property name="toolTip" >
-        <string>Remove from list</string>
+       <property name="orientation">
+        <enum>Qt::Vertical</enum>
        </property>
-       <property name="whatsThis" >
-        <string>Remove the highlighted object(s) from the observing list</string>
+      </widget>
+     </item>
+     <item>
+      <widget class="KImageFilePreview" name="ImagePreview">
+       <property name="minimumSize">
+        <size>
+         <width>200</width>
+         <height>200</height>
+        </size>
        </property>
-       <property name="text" >
-        <string>Remove</string>
-       </property>
       </widget>
      </item>
      <item>
-      <spacer>
-       <property name="orientation" >
+      <spacer name="horizontalSpacer">
+       <property name="orientation">
         <enum>Qt::Horizontal</enum>
        </property>
-       <property name="sizeType" >
-        <enum>QSizePolicy::Expanding</enum>
-       </property>
-       <property name="sizeHint" >
+       <property name="sizeHint" stdset="0">
         <size>
-         <width>40</width>
+         <width>20</width>
          <height>20</height>
         </size>
        </property>
       </spacer>
      </item>
+     <item>
+      <layout class="QVBoxLayout" name="verticalLayout">
+       <property name="rightMargin">
+        <number>12</number>
+       </property>
+       <item>
+        <widget class="QPushButton" name="SaveImage">
+         <property name="text">
+          <string>Save</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QPushButton" name="GoogleImage">
+         <property name="text">
+          <string>Find Image</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QPushButton" name="DeleteImage">
+         <property name="text">
+          <string>Delete</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </item>
     </layout>
    </item>
    <item>
-    <widget class="QTableView" name="TableView" >
-     <property name="editTriggers" >
-      <set>QAbstractItemView::NoEditTriggers</set>
-     </property>
-     <property name="selectionBehavior" >
-      <enum>QAbstractItemView::SelectRows</enum>
-     </property>
-     <property name="showGrid" >
-      <bool>false</bool>
-     </property>
-     <property name="sortingEnabled" >
-      <bool>true</bool>
-     </property>
-    </widget>
-   </item>
-   <item>
-    <widget class="QLabel" name="NotesLabel" >
-     <property name="sizePolicy" >
-      <sizepolicy vsizetype="Fixed" hsizetype="Preferred" >
+    <widget class="QLabel" name="NotesLabel">
+     <property name="sizePolicy">
+      <sizepolicy hsizetype="Preferred" vsizetype="Fixed">
        <horstretch>0</horstretch>
        <verstretch>0</verstretch>
       </sizepolicy>
      </property>
-     <property name="font" >
+     <property name="font">
       <font>
        <family>Sans Serif</family>
        <pointsize>9</pointsize>
@@ -386,30 +563,57 @@
        <strikeout>false</strikeout>
       </font>
      </property>
-     <property name="text" >
+     <property name="text">
       <string>Select an object to record notes on it here:</string>
      </property>
-     <property name="alignment" >
+     <property name="alignment">
       <set>Qt::AlignVCenter</set>
      </property>
     </widget>
    </item>
    <item>
-    <widget class="KTextEdit" name="NotesEdit" />
+    <widget class="KTextEdit" name="NotesEdit">
+     <property name="sizePolicy">
+      <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
+       <horstretch>0</horstretch>
+       <verstretch>0</verstretch>
+      </sizepolicy>
+     </property>
+    </widget>
    </item>
   </layout>
  </widget>
  <customwidgets>
   <customwidget>
+   <class>KImageFilePreview</class>
+   <extends>QWidget</extends>
+   <header>kimagefilepreview.h</header>
+  </customwidget>
+  <customwidget>
+   <class>KPlotWidget</class>
+   <extends>QFrame</extends>
+   <header>kplotwidget.h</header>
+  </customwidget>
+  <customwidget>
    <class>KPushButton</class>
    <extends>QPushButton</extends>
    <header>kpushbutton.h</header>
   </customwidget>
   <customwidget>
+   <class>KSeparator</class>
+   <extends>QFrame</extends>
+   <header>kseparator.h</header>
+  </customwidget>
+  <customwidget>
    <class>KTextEdit</class>
    <extends>QTextEdit</extends>
    <header>ktextedit.h</header>
   </customwidget>
+  <customwidget>
+   <class>AVTPlotWidget</class>
+   <extends>KPlotWidget</extends>
+   <header>tools/avtplotwidget.h</header>
+  </customwidget>
  </customwidgets>
  <resources/>
  <connections/>
Index: kstars/tools/wutdialog.cpp
===================================================================
--- kstars/tools/wutdialog.cpp	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/tools/wutdialog.cpp	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -42,8 +42,9 @@
     setupUi( this );
 }
 
-WUTDialog::WUTDialog(KStars *ks) :
-        KDialog( (QWidget*)ks ), kstars(ks), EveningFlag(0)
+WUTDialog::WUTDialog( KStars *ks, bool _session ) :
+        KDialog( (QWidget*)ks ), kstars(ks), EveningFlag(0),
+        timer(NULL)
 {
 
     WUT = new WUTDialogUI( this );
@@ -54,7 +55,7 @@
 
     //initialize location and date to current KStars settings:
     geo = kstars->geo();
-
+    session = _session;
     T0 = kstars->data()->lt();
     //If the Time is earlier than 6:00 am, assume the user wants the night of the previous date
     if ( T0.time().hour() < 6 )
@@ -78,7 +79,10 @@
     sGeo += ", " + geo->translatedCountry();
     WUT->LocationLabel->setText( i18n( "at %1", sGeo ) );
     WUT->DateLabel->setText( i18n( "The night of %1", KGlobal::locale()->formatDate( Evening.date(), KLocale::LongDate ) ) );
-
+    m_Mag = 10.0;
+    WUT->MagnitudeEdit->setValue( m_Mag );
+    WUT->MagnitudeEdit->setSliderEnabled( true );
+    WUT->MagnitudeEdit->setSingleStep(0.100);
     initCategories();
 
     makeConnections();
@@ -94,18 +98,20 @@
     connect( WUT->LocationButton, SIGNAL( clicked() ), SLOT( slotChangeLocation() ) );
     connect( WUT->CenterButton, SIGNAL( clicked() ), SLOT( slotCenter() ) );
     connect( WUT->DetailButton, SIGNAL( clicked() ), SLOT( slotDetails() ) );
+    connect( WUT->ObslistButton, SIGNAL( clicked() ), SLOT( slotObslist() ) );
     connect( WUT->CategoryListWidget, SIGNAL( currentTextChanged(const QString &) ),
              SLOT( slotLoadList(const QString &) ) );
     connect( WUT->ObjectListWidget, SIGNAL( currentTextChanged(const QString &) ),
              SLOT( slotDisplayObject(const QString &) ) );
     connect( WUT->EveningMorningBox, SIGNAL( activated(int) ), SLOT( slotEveningMorning(int) ) );
+    connect( WUT->MagnitudeEdit, SIGNAL( valueChanged( double ) ), SLOT( slotChangeMagnitude() ) );
 }
 
 void WUTDialog::initCategories() {
-    m_Categories << i18n( "Planets" ) << i18n( "Comets" )
-    << i18n( "Asteroids" ) << i18n( "Stars" )
-    << i18n( "Constellations" ) << i18n( "Star Clusters" )
-    << i18n( "Nebulae" ) << i18n( "Galaxies" );
+    m_Categories << i18n( "Planets" ) << i18n( "Stars" )
+    << i18n( "Nebulae" ) << i18n( "Galaxies" )
+    << i18n( "Star Clusters" ) << i18n( "Constellations" ) 
+    << i18n( "Asteroids" ) << i18n( "Comets" );
 
     foreach ( const QString &c, m_Categories )
     WUT->CategoryListWidget->addItem( c );
@@ -228,39 +234,39 @@
             foreach ( const QString &name, kstars->data()->skyComposite()->objectNames( SkyObject::PLANET ) ) {
                 SkyObject *o = kstars->data()->skyComposite()->findByName( name );
 
-                if ( checkVisibility( o ) )
+                if ( checkVisibility( o ) && o->mag() <= m_Mag )
                     visibleObjects(c).append(o);
             }
 
             m_CategoryInitialized[ c ] = true;
         }
 
-        else if ( c == m_Categories[1] ) { //Comets
-            foreach ( SkyObject *o, kstars->data()->skyComposite()->comets() )
-            if ( checkVisibility(o) )
+        else if ( c == m_Categories[1] ) { //Stars
+            foreach ( SkyObject *o, kstars->data()->skyComposite()->stars() )
+            if ( o->name() != i18n("star") && checkVisibility(o) && o->mag() <= m_Mag )
                 visibleObjects(c).append(o);
 
             m_CategoryInitialized[ c ] = true;
         }
 
-        else if ( c == m_Categories[2] ) { //Asteroids
-            foreach ( SkyObject *o, kstars->data()->skyComposite()->asteroids() )
-            if ( checkVisibility(o) && o->name() != i18n("Pluto") )
+        else if ( c == m_Categories[5] ) { //Constellations
+            foreach ( SkyObject *o, kstars->data()->skyComposite()->constellationNames() )
+            if ( checkVisibility(o) )
                 visibleObjects(c).append(o);
 
             m_CategoryInitialized[ c ] = true;
         }
 
-        else if ( c == m_Categories[3] ) { //Stars
-            foreach ( SkyObject *o, kstars->data()->skyComposite()->stars() )
-            if ( o->name() != i18n("star") && checkVisibility(o) )
+        else if ( c == m_Categories[6] ) { //Asteroids
+            foreach ( SkyObject *o, kstars->data()->skyComposite()->asteroids() )
+            if ( checkVisibility(o) && o->name() != i18n("Pluto") && o->mag() <= m_Mag )
                 visibleObjects(c).append(o);
 
             m_CategoryInitialized[ c ] = true;
         }
 
-        else if ( c == m_Categories[4] ) { //Constellations
-            foreach ( SkyObject *o, kstars->data()->skyComposite()->constellationNames() )
+        else if ( c == m_Categories[7] ) { //Comets
+            foreach ( SkyObject *o, kstars->data()->skyComposite()->comets() )
             if ( checkVisibility(o) )
                 visibleObjects(c).append(o);
 
@@ -270,27 +276,27 @@
         else { //all deep-sky objects, need to split clusters, nebulae and galaxies
             foreach ( DeepSkyObject *dso, kstars->data()->skyComposite()->deepSkyObjects() ) {
                 SkyObject *o = (SkyObject*)dso;
-                if ( checkVisibility(o) ) {
+                if ( checkVisibility(o) && o->mag() <= m_Mag ) {
                     switch( o->type() ) {
                     case SkyObject::OPEN_CLUSTER: //fall through
                     case SkyObject::GLOBULAR_CLUSTER:
-                        visibleObjects(m_Categories[5]).append(o); //star clusters
+                        visibleObjects(m_Categories[4]).append(o); //star clusters
                         break;
                     case SkyObject::GASEOUS_NEBULA: //fall through
                     case SkyObject::PLANETARY_NEBULA: //fall through
                     case SkyObject::SUPERNOVA_REMNANT:
-                        visibleObjects(m_Categories[6]).append(o); //nebulae
+                        visibleObjects(m_Categories[2]).append(o); //nebulae
                         break;
                     case SkyObject::GALAXY:
-                        visibleObjects(m_Categories[7]).append(o); //galaxies
+                        visibleObjects(m_Categories[3]).append(o); //galaxies
                         break;
                     }
                 }
             }
 
-            m_CategoryInitialized[ m_Categories[5] ] = true;
-            m_CategoryInitialized[ m_Categories[6] ] = true;
-            m_CategoryInitialized[ m_Categories[7] ] = true;
+            m_CategoryInitialized[ m_Categories[2] ] = true;
+            m_CategoryInitialized[ m_Categories[3] ] = true;
+            m_CategoryInitialized[ m_Categories[4] ] = true;
         }
     }
 
@@ -380,8 +386,8 @@
         } else {
             tRise = o->riseSetTime( T0, geo, true );
             tSet = o->riseSetTime( T0, geo, false );
-            //			if ( tSet < tRise )
-            //				tSet = o->riseSetTime( JDTomorrow, geo, false );
+            //          if ( tSet < tRise )
+            //              tSet = o->riseSetTime( JDTomorrow, geo, false );
 
             sRise.clear();
             sRise.sprintf( "%02d:%02d", tRise.hour(), tRise.minute() );
@@ -390,8 +396,8 @@
         }
 
         tTransit = o->transitTime( T0, geo );
-        //		if ( tTransit < tRise )
-        //			tTransit = o->transitTime( JDTomorrow, geo );
+        //      if ( tTransit < tRise )
+        //          tTransit = o->transitTime( JDTomorrow, geo );
 
         sTransit.clear();
         sTransit.sprintf( "%02d:%02d", tTransit.hour(), tTransit.minute() );
@@ -429,6 +435,19 @@
 	delete detail;
     }
 }
+void WUTDialog::slotObslist() {
+    SkyObject *o = 0;
+    // get selected item
+    if (WUT->ObjectListWidget->currentItem() != 0) {
+        o = kstars->data()->objectNamed( WUT->ObjectListWidget->currentItem()->text() );
+    }
+    if(o != 0) {
+        if(!session)
+            kstars->observingList()->slotAddObject( o ) ;
+        else
+            kstars->observingList()->slotAddObject( o, true );
+    }
+}
 
 void WUTDialog::slotChangeDate() {
 
@@ -496,4 +515,20 @@
     }
 }
 
+void WUTDialog::updateMag() {
+    m_Mag = WUT->MagnitudeEdit->value();
+    init();
+    slotLoadList( WUT->CategoryListWidget->currentItem()->text() );
+}
+
+void WUTDialog::slotChangeMagnitude() {
+    if( timer ) {
+        timer->stop();
+    } else {
+        timer = new QTimer( this );
+        timer->setSingleShot( true );
+        connect( timer, SIGNAL( timeout() ), this, SLOT( updateMag() ) );
+    }
+    timer->start( 500 );
+}
 #include "wutdialog.moc"
Index: kstars/tools/altvstime.cpp
===================================================================
--- kstars/tools/altvstime.cpp	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/tools/altvstime.cpp	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -34,6 +34,7 @@
 #include <kplotwidget.h>
 
 #include "ui_altvstime.h"
+#include "ksalmanac.h"
 #include "dms.h"
 #include "kstars.h"
 #include "kstarsdata.h"
@@ -45,7 +46,6 @@
 #include "dialogs/locationdialog.h"
 #include "widgets/dmsbox.h"
 #include "avtplotwidget.h"
-
 #include "kstarsdatetime.h"
 
 AltVsTimeUI::AltVsTimeUI( QWidget *p ) : QFrame( p ) {
@@ -56,7 +56,7 @@
         KDialog( parent )
 {
     ks = (KStars*) parent;
-
+    ksal = KSAlmanac::Instance();
     QFrame *page = new QFrame( this );
     setMainWidget(page);
     setCaption( i18n( "Altitude vs. Time" ) );
@@ -98,7 +98,6 @@
     avtUI->latBox->show( geo->lat() );
 
     computeSunRiseSetTimes();
-
     setLSTLimits();
 
     connect( avtUI->browseButton, SIGNAL( clicked() ), this, SLOT( slotBrowseObject() ) );
@@ -345,38 +344,11 @@
     //Determine the time of sunset and sunrise for the desired date and location
     //expressed as doubles, the fraction of a full day.
     KStarsDateTime today = getDate();
-
-    SkyObject *oSun = ks->data()->objectNamed( "Sun" );
-    double sunRise = -1.0 * oSun->riseSetTime( today.djd() + 1.0, geo, true ).secsTo(QTime()) / 86400.0;
-    double sunSet = -1.0 * oSun->riseSetTime( today.djd(), geo, false ).secsTo(QTime()) / 86400.0;
-
-    //check to see if Sun is circumpolar
-    //requires temporary repositioning of Sun to target date
-    KSNumbers *num = new KSNumbers( today.djd() );
-    KSNumbers *oldNum = new KSNumbers( ks->data()->ut().djd() );
-    dms LST = geo->GSTtoLST( getDate().gst() );
-    oSun->updateCoords( num, true, geo->lat(), &LST );
-    if ( oSun->checkCircumpolar( geo->lat() ) ) {
-        if ( oSun->alt()->Degrees() > 0.0 ) {
-            //Circumpolar, signal it this way:
-            sunRise = 0.0;
-            sunSet = 1.0;
-        } else {
-            //never rises, signal it this way:
-            sunRise = 0.0;
-            sunSet = -1.0;
-        }
-    }
-
-    //Notify the View about new sun rise/set times:
+    ksal->setDate( &today);
+    ksal->setLocation(geo);
+    double sunRise = ksal->getSunRise();
+    double sunSet = ksal->getSunSet();
     avtUI->View->setSunRiseSetTimes( sunRise, sunSet );
-
-    //Restore Sun coordinates:
-    oSun->updateCoords( oldNum, true, ks->geo()->lat(), ks->LST() );
-    oSun->EquatorialToHorizontal( ks->LST(), ks->geo()->lat() );
-
-    delete num;
-    delete oldNum;
 }
 
 void AltVsTime::slotUpdateDateLoc() {
Index: kstars/tools/observinglist.cpp
===================================================================
--- kstars/tools/observinglist.cpp	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/tools/observinglist.cpp	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -26,6 +26,7 @@
 #include <QStandardItemModel>
 #include <QSortFilterProxyModel>
 #include <QHeaderView>
+#include <QDirIterator>
 
 #include <kpushbutton.h>
 #include <kstatusbar.h>
@@ -37,16 +38,29 @@
 #include <kfiledialog.h>
 #include <ktemporaryfile.h>
 #include <klineedit.h>
+#include <kplotobject.h>
+#include <kplotaxis.h>
+#include <kplotwidget.h>
+#include <kio/copyjob.h>
+#include <kstandarddirs.h>
 
+#include "ksalmanac.h"
 #include "obslistwizard.h"
 #include "kstars.h"
 #include "kstarsdata.h"
+#include "ksutils.h"
+#include "dialogs/locationdialog.h"
 #include "skyobjects/skyobject.h"
 #include "skyobjects/starobject.h"
 #include "skymap.h"
 #include "dialogs/detaildialog.h"
+#include "dialogs/finddialog.h"
 #include "tools/altvstime.h"
+#include "tools/wutdialog.h"
 #include "Options.h"
+#include "imageviewer.h"
+#include "thumbnailpicker.h"
+#include "obslistpopupmenu.h"
 
 #include <config-kstars.h>
 
@@ -79,19 +93,51 @@
     setMainWidget( ui );
     setCaption( i18n( "Observing List" ) );
     setButtons( KDialog::Close );
-
+    dt = KStarsDateTime::currentDateTime();
+    geo = ks->geo();
+    sessionView = false;
+    pmenu = new ObsListPopupMenu( KStars::Instance() );
     //Set up the Table Views
     m_Model = new QStandardItemModel( 0, 5, this );
+    m_Session = new QStandardItemModel( 0, 5 );
     m_Model->setHorizontalHeaderLabels( QStringList() << i18n( "Name" ) 
         << i18nc( "Right Ascension", "RA" ) << i18nc( "Declination", "Dec" )
         << i18nc( "Magnitude", "Mag" ) << i18n( "Type" ) );
+    m_Session->setHorizontalHeaderLabels( QStringList() << i18n( "Name" ) 
+        << i18nc( "Right Ascension", "RA" ) << i18nc( "Declination", "Dec" )
+        << i18nc( "Magnitude", "Mag" ) << i18n( "Type" ) 
+        << i18n( "Time" ) << i18nc( "Altitude", "Alt" ) << i18nc( "Azimuth", "Az" ));
     m_SortModel = new QSortFilterProxyModel( this );
     m_SortModel->setSourceModel( m_Model );
     m_SortModel->setDynamicSortFilter( true );
     ui->TableView->setModel( m_SortModel );
     ui->TableView->horizontalHeader()->setStretchLastSection( true );
     ui->TableView->horizontalHeader()->setResizeMode( QHeaderView::ResizeToContents );
-
+    m_SortModelSession = new QSortFilterProxyModel;
+    m_SortModelSession->setSourceModel( m_Session );
+    m_SortModelSession->setDynamicSortFilter( true );
+    ui->SessionView->setModel( m_SortModelSession );
+    ui->SessionView->horizontalHeader()->setStretchLastSection( true );
+    ui->SessionView->horizontalHeader()->setResizeMode( QHeaderView::ResizeToContents );
+    ksal = KSAlmanac::Instance();
+    ksal->setLocation(geo);
+    ui->View->setSunRiseSetTimes(ksal->getSunRise(),ksal->getSunSet());
+    ui->View->setLimits( -12.0, 12.0, -90.0, 90.0 );
+    ui->View->axis(KPlotWidget::BottomAxis)->setTickLabelFormat( 't' );
+    ui->View->axis(KPlotWidget::BottomAxis)->setLabel( i18n( "Local Time" ) );
+    ui->View->axis(KPlotWidget::TopAxis)->setTickLabelFormat( 't' );
+    ui->View->axis(KPlotWidget::TopAxis)->setTickLabelsShown( true );
+    ui->DateEdit->setDate(dt.date());
+    ui->SetLocation->setText( geo -> fullName() );
+    ui->ImagePreview->installEventFilter( this );
+    ui->TableView->viewport()->installEventFilter( this );
+    ui->SessionView->viewport()->installEventFilter( this );
+    QFile file;
+    if ( KSUtils::openDataFile( file, "noimage.png" ) ) {
+       file.close();
+       ui->ImagePreview->showPreview( KUrl( file.fileName() ) );
+    } else
+        ui->ImagePreview->hide();
     //Connections
     connect( this, SIGNAL( closeClicked() ), this, SLOT( slotClose() ) );
     connect( ui->TableView, SIGNAL( doubleClicked( const QModelIndex& ) ),
@@ -99,219 +145,371 @@
     connect( ui->TableView->selectionModel(), 
             SIGNAL( selectionChanged(const QItemSelection&, const QItemSelection&) ),
             this, SLOT( slotNewSelection() ) );
-    connect( ui->RemoveButton, SIGNAL( clicked() ),
-             this, SLOT( slotRemoveSelectedObjects() ) );
-    connect( ui->CenterButton, SIGNAL( clicked() ),
-             this, SLOT( slotCenterObject() ) );
-
-    #ifdef HAVE_INDI_H
-    connect( ui->ScopeButton, SIGNAL( clicked() ),
-             this, SLOT( slotSlewToObject() ) );
-    #endif
-
-    connect( ui->DetailsButton, SIGNAL( clicked() ),
-             this, SLOT( slotDetails() ) );
-    connect( ui->AVTButton, SIGNAL( clicked() ),
-             this, SLOT( slotAVT() ) );
-
+    connect( ui->SessionView->selectionModel(), 
+            SIGNAL( selectionChanged(const QItemSelection&, const QItemSelection&) ),
+            this, SLOT( slotNewSelection() ) );
+    connect( ui->WUTButton, SIGNAL( clicked() ),
+             this, SLOT( slotWUT() ) );
+    connect( ui->FindButton, SIGNAL( clicked() ),
+             this, SLOT( slotFind() ) );
     connect( ui->OpenButton, SIGNAL( clicked() ),
              this, SLOT( slotOpenList() ) );
     connect( ui->SaveButton, SIGNAL( clicked() ),
-             this, SLOT( slotSaveList() ) );
+             this, SLOT( slotSaveSession() ) );
     connect( ui->SaveAsButton, SIGNAL( clicked() ),
-             this, SLOT( slotSaveListAs() ) );
+             this, SLOT( slotSaveSessionAs() ) );
     connect( ui->WizardButton, SIGNAL( clicked() ),
              this, SLOT( slotWizard() ) );
     connect( ui->MiniButton, SIGNAL( clicked() ),
              this, SLOT( slotToggleSize() ) );
-
+    connect( ui->SetLocation, SIGNAL( clicked() ),
+             this, SLOT( slotLocation() ) );
+    connect( ui->Update, SIGNAL( clicked() ),
+             this, SLOT( slotUpdate() ) );
+    connect( ui->SaveImage, SIGNAL( clicked() ),
+             this, SLOT( slotSaveImage() ) );
+    connect( ui->DeleteImage, SIGNAL( clicked() ),
+             this, SLOT( slotDeleteImage() ) );
+    connect( ui->GoogleImage, SIGNAL( clicked() ),
+             this, SLOT( slotGoogleImage() ) );
+    connect( ui->SetTime, SIGNAL( clicked() ),
+             this, SLOT( slotSetTime() ) );
+    connect( ui->tabWidget, SIGNAL( currentChanged(int) ),
+             this, SLOT( slotChangeTab(int) ) );
+    connect( ui->saveImages, SIGNAL( clicked() ),
+             this, SLOT( slotSaveImages() ) );
+    connect( ui->DeleteImages, SIGNAL( clicked() ),
+             this, SLOT( slotDeleteImages() ) );
     //Add icons to Push Buttons
     ui->OpenButton->setIcon( KIcon("document-open") );
     ui->SaveButton->setIcon( KIcon("document-save") );
     ui->SaveAsButton->setIcon( KIcon("document-save-as") );
     ui->WizardButton->setIcon( KIcon("games-solve") ); //is there a better icon for this button?
     ui->MiniButton->setIcon( KIcon("view-restore") );
-
-    ui->CenterButton->setEnabled( false );
-    ui->ScopeButton->setEnabled( false );
-    ui->DetailsButton->setEnabled( false );
-    ui->AVTButton->setEnabled( false );
-    ui->RemoveButton->setEnabled( false );
+    noSelection = true;
+    showScope = false;
     ui->NotesLabel->setEnabled( false );
     ui->NotesEdit->setEnabled( false );
+    ui->SetTime->setEnabled( false );
+    ui->TimeEdit->setEnabled( false );
+    ui->GoogleImage->setEnabled( false );
+    ui->saveImages->setEnabled( false );
+    ui->SaveImage->setEnabled( false );
+    ui->DeleteImage->setEnabled( false );
 
+    slotLoadWishList(); //Load the wishlist from disk if present
+    m_CurrentObject = 0;
+    setSaveImages();
     //Hide the MiniButton until I can figure out how to resize the Dialog!
-    ui->MiniButton->hide();
+//    ui->MiniButton->hide();
 }
 
-bool ObservingList::contains( const SkyObject *q ) {
-    foreach ( SkyObject* o, obsList() ) {
-        if ( o == q ) return true;
+ObservingList::~ObservingList() {
+    foreach( ImageViewer *iv, ivList ) {
+        delete iv;
     }
-
-    return false;
 }
-
-
 //SLOTS
 
-void ObservingList::slotAddObject( SkyObject *obj ) {
+void ObservingList::slotAddObject( SkyObject *obj, bool session, bool update ) {
+    bool addToWishList=true;
     if ( ! obj ) obj = ks->map()->clickedObject();
 
     //First, make sure object is not already in the list
-    foreach ( SkyObject *o, obsList() ) {
-        if ( obj == o ) {
-            ks->statusBar()->changeItem( i18n( "%1 is already in the observing list.", obj->name() ), 0 );
+    if ( obsList().contains( obj ) ) {
+        addToWishList = false;
+        if( ! session ) {
+            ks->statusBar()->changeItem( i18n( "%1 is already in your wishlist.", obj->name() ), 0 );
             return;
         }
     }
 
-    //Insert object in obsList
-    m_ObservingList.append( obj );
-    m_CurrentObject = obj;
-    QList<QStandardItem*> itemList;
+    if ( session && sessionList().contains( obj ) ) { 
+        ks->statusBar()->changeItem( i18n( "%1 is already in the session plan.", obj->name() ), 0 );
+        return;
+    }
+    
     QString smag = "--";
     if (  - 30.0 < obj->mag() && obj->mag() < 90.0 ) smag = QString::number( obj->mag(), 'g', 2 ); // The lower limit to avoid display of unrealistic comet magnitudes
-    itemList << new QStandardItem( obj->translatedName() ) 
-            << new QStandardItem( obj->ra()->toHMSString() ) 
-            << new QStandardItem( obj->dec()->toDMSString() ) 
-            << new QStandardItem( smag )
-            << new QStandardItem( obj->typeName() );
-    m_Model->appendRow( itemList );
-    if ( ! isModified ) isModified = true;
 
-    //Note addition in statusbar
-    ks->statusBar()->changeItem( i18n( "Added %1 to observing list.", obj->name() ), 0 );
+    SkyPoint p = obj->recomputeCoords( dt, geo );
 
-    ui->TableView->resizeColumnsToContents();
+    //Insert object in the Wish List
+    if( addToWishList  ) {
+        m_ObservingList.append( obj );
+        m_CurrentObject = obj;
+        QList<QStandardItem*> itemList;
+        if(obj->name() == "star" )
+            itemList << new QStandardItem( obj->translatedName() ) 
+                    << new QStandardItem( obj->ra0()->toHMSString() ) 
+                    << new QStandardItem( obj->dec0()->toDMSString() ) 
+                    << new QStandardItem( smag )
+                    << new QStandardItem( obj->typeName() );
+        else
+            itemList << new QStandardItem( obj->translatedName() ) 
+                    << new QStandardItem( p.ra()->toHMSString() ) 
+                    << new QStandardItem( p.dec()->toDMSString() ) 
+                    << new QStandardItem( smag )
+                    << new QStandardItem( obj->typeName() );
+        m_Model->appendRow( itemList );
+        //Note addition in statusbar
+        ks->statusBar()->changeItem( i18n( "Added %1 to observing list.", obj->name() ), 0 );
+        ui->TableView->resizeColumnsToContents(); 
+        if( ! update ) slotSaveList();
+    }
+    //Insert object in the Session List
+    if( session ){
+        m_SessionList.append(obj);
+        dt.setTime( TimeHash.value( obj->name(), obj->transitTime( dt, geo ) ) );
+        dms lst(geo->GSTtoLST( dt.gst() ));
+        p.EquatorialToHorizontal( &lst, geo->lat() );
+        QList<QStandardItem*> itemList;
+        if(obj->name() == "star" )
+            itemList << new QStandardItem( obj->translatedName() ) 
+                    << new QStandardItem( obj->ra0()->toHMSString() ) 
+                    << new QStandardItem( obj->dec0()->toDMSString() ) 
+                    << new QStandardItem( smag )
+                    << new QStandardItem( obj->typeName() )
+                    << new QStandardItem( "--"  )
+                    << new QStandardItem( "--"  )
+                    << new QStandardItem( "--"  );
+        else
+            itemList << new QStandardItem( obj->translatedName() ) 
+                    << new QStandardItem( p.ra()->toHMSString() ) 
+                    << new QStandardItem( p.dec()->toDMSString() ) 
+                    << new QStandardItem( smag )
+                    << new QStandardItem( obj->typeName() )
+                    << new QStandardItem( TimeHash.value( obj->name(), obj->transitTime( dt, geo ) ).toString( "h:mm A" ) )
+                    << new QStandardItem( p.alt()->toDMSString() )
+                    << new QStandardItem( p.az()->toDMSString() );
+        m_Session->appendRow( itemList );
+        //Adding an object should trigger the modified flag
+        if ( ! isModified ) isModified = true;
+        ui->SessionView->resizeColumnsToContents();
+        //Note addition in statusbar
+        ks->statusBar()->changeItem( i18n( "Added %1 to session list.", obj->name() ), 0 );
+    }
+    setSaveImages();
 }
 
-void ObservingList::slotRemoveObject( SkyObject *o ) {
-    if ( !o )
-        o = ks->map()->clickedObject();
-
-    int k = obsList().indexOf( o );
-    if ( k < 0 ) return; //object not in observing list
-
-    //DEBUG
-    kDebug() << "Removing " << o->name();
-
-    if ( o == LogObject )
-        saveCurrentUserLog();
-
-    //Remove row from the TableView model
-    bool found(false);
-    if ( o->name() == "star" ) {
-        //Find object in table by RA and Dec
-        for ( int irow = 0; irow < m_Model->rowCount(); ++irow ) {
-            QString ra = m_Model->item(irow, 1)->text();
-            QString dc = m_Model->item(irow, 2)->text();
-            if ( o->ra()->toHMSString() == ra && o->dec()->toDMSString() == dc ) {
-                m_Model->removeRow(irow);
-                found = true;
-                break;
+void ObservingList::slotRemoveObject( SkyObject *o, bool session, bool update ) {
+    if( ! update ) { 
+        if ( ! o )
+            o = ks->map()->clickedObject(); 
+        else if( sessionView ) //else if is needed as clickedObject should not be removed from the session list.
+            session = true;
+    }
+    if( ! session ) {
+        int k = obsList().indexOf( o );
+        if ( o == LogObject ) saveCurrentUserLog();
+        //Remove row from the TableView model
+        bool found(false);
+        if ( o->name() == "star" ) {
+            //Find object in table by RA and Dec
+            for ( int irow = 0; irow < m_Model->rowCount(); ++irow ) {
+                QString ra = m_Model->item(irow, 1)->text();
+                QString dc = m_Model->item(irow, 2)->text();
+                if ( o->ra0()->toHMSString() == ra && o->dec0()->toDMSString() == dc ) {
+                    m_Model->removeRow(irow);
+                    found = true;
+                    break;
+                }
             }
+        } else { // name is not "star"
+            //Find object in table by name
+            for ( int irow = 0; irow < m_Model->rowCount(); ++irow ) {
+                QString name = m_Model->item(irow, 0)->text();
+                if ( o->translatedName() == name ) {
+                    m_Model->removeRow(irow);
+                    found = true;
+                    break;
+                }
+            }
         }
-    } else { // name is not "star"
-        //Find object in table by name
-        for ( int irow = 0; irow < m_Model->rowCount(); ++irow ) {
-            QString name = m_Model->item(irow, 0)->text();
-            if ( o->translatedName() == name ) {
-                m_Model->removeRow(irow);
-                found = true;
-                break;
+        obsList().removeAt(k);
+        ui->View->removeAllPlotObjects();
+        ui->TableView->resizeColumnsToContents();
+        if( ! update ) slotSaveList();
+    } else {
+        int k = sessionList().indexOf( o );
+        if ( o == LogObject ) saveCurrentUserLog();
+        //Remove row from the Session View model
+        bool found(false);
+        if ( o->name() == "star" ) {
+            //Find object in table by RA and Dec
+            for ( int irow = 0; irow < m_Model->rowCount(); ++irow ) {
+                QString ra = m_Session->item(irow, 1)->text();
+                QString dc = m_Session->item(irow, 2)->text();
+                if ( o->ra0()->toHMSString() == ra && o->dec0()->toDMSString() == dc ) {
+                    m_Session->removeRow(irow);
+                    found = true;
+                    break;
+                }
             }
+        } else { // name is not "star"
+            //Find object in table by name
+            for ( int irow = 0; irow < m_Session->rowCount(); ++irow ) {
+                QString name = m_Session->item(irow, 0)->text();
+                if ( o->translatedName() == name ) {
+                    m_Session->removeRow(irow);
+                    found = true;
+                    break;
+                }
+            }
         }
+        if( ! update )
+            TimeHash.remove( o->name() );
+        sessionList().removeAt(k);//Remove from the session list
+        if ( ! isModified ) isModified = true;//Removing an object should trigger the modified flag
+        ui->View->removeAllPlotObjects();
+        ui->SessionView->resizeColumnsToContents();
     }
-
-    if ( !found ) kDebug() << "Did not find object named " << o->translatedName() << " in the Table!";
-
-    obsList().removeAt(k);
-    if ( ! isModified ) isModified = true;
-
-    ui->TableView->resizeColumnsToContents();
 }
 
 void ObservingList::slotRemoveSelectedObjects() {
-    if ( ! ui->TableView->selectionModel()->hasSelection() ) return;
-
-    //Find each object by name in the observing list, and remove it
-    //Go backwards so item alignment doesn't get screwed up as rows are removed.
-    for ( int irow = m_Model->rowCount()-1; irow >= 0; --irow ) {
-        if ( ui->TableView->selectionModel()->isRowSelected( irow, QModelIndex() ) ) {
-            QModelIndex mSortIndex = m_SortModel->index( irow, 0 );
-            QModelIndex mIndex = m_SortModel->mapToSource( mSortIndex );
-            int irow = mIndex.row();
-            QString ra = m_Model->item(irow, 1)->text();
-            QString dc = m_Model->item(irow, 2)->text();
-
-            foreach ( SkyObject *o, obsList() ) {
-                //Stars named "star" must be matched by coordinates
-                if ( o->name() == "star" ) {
-                    if ( o->ra()->toHMSString() == ra && o->dec()->toDMSString() == dc ) {
-                        slotRemoveObject( o );
+    if( sessionView )
+    {
+        //Find each object by name in the session list, and remove it
+        //Go backwards so item alignment doesn't get screwed up as rows are removed.
+        for ( int irow = m_Session->rowCount()-1; irow >= 0; --irow ) {
+            if ( ui->SessionView->selectionModel()->isRowSelected( irow, QModelIndex() ) ) {
+                QModelIndex mSortIndex = m_SortModelSession->index( irow, 0 );
+                QModelIndex mIndex = m_SortModelSession->mapToSource( mSortIndex );
+                int irow = mIndex.row();
+                QString ra = m_Session->item(irow, 1)->text();
+                QString dc = m_Session->item(irow, 2)->text();
+                foreach ( SkyObject *o, sessionList() ) {
+                    //Stars named "star" must be matched by coordinates
+                    if ( o->name() == "star" ) {
+                        if ( o->ra0()->toHMSString() == ra && o->dec0()->toDMSString() == dc ) {
+                            slotRemoveObject( o, true );
+                            break;
+                        }
+    
+                    } else if ( o->translatedName() == mIndex.data().toString() ) {
+                        slotRemoveObject( o, true );
                         break;
                     }
-
-                } else if ( o->translatedName() == mIndex.data().toString() ) {
-                    slotRemoveObject( o );
-                    break;
                 }
             }
         }
+        //we've removed all selected objects, so clear the selection
+        ui->SessionView->selectionModel()->clear();
+    } else {
+         //Find each object by name in the observing list, and remove it
+         //Go backwards so item alignment doesn't get screwed up as rows are removed.
+         for ( int irow = m_Model->rowCount()-1; irow >= 0; --irow ) {
+             if ( ui->TableView->selectionModel()->isRowSelected( irow, QModelIndex() ) ) {
+                 QModelIndex mSortIndex = m_SortModel->index( irow, 0 );
+                 QModelIndex mIndex = m_SortModel->mapToSource( mSortIndex );
+                 int irow = mIndex.row();
+                 QString ra = m_Model->item(irow, 1)->text();
+                 QString dc = m_Model->item(irow, 2)->text(); 
+                 foreach ( SkyObject *o, obsList() ) {
+                     //Stars named "star" must be matched by coordinates
+                     if ( o->name() == "star" ) {
+                         if ( o->ra0()->toHMSString() == ra && o->dec0()->toDMSString() == dc ) {
+                             slotRemoveObject( o );
+                             break;
+                         }
+     
+                     } else if ( o->translatedName() == mIndex.data().toString() ) {
+                         slotRemoveObject( o );
+                         break;
+                     }
+                 }
+             }
+         }
+        //we've removed all selected objects, so clear the selection
+        ui->TableView->selectionModel()->clear();
     }
-
-    //we've removed all selected objects, so clear the selection
-    ui->TableView->selectionModel()->clear();
+    setSaveImages();
+    ui->ImagePreview->setCursor( Qt::ArrowCursor );
 }
 
 void ObservingList::slotNewSelection() {
-    QModelIndexList selectedItems = m_SortModel->mapSelectionToSource( ui->TableView->selectionModel()->selection() ).indexes();
-
-    //Enable widgets when one object selected
-    if ( selectedItems.size() == m_Model->columnCount() ) {
-        QString newName( selectedItems[0].data().toString() );
-
-        //Enable buttons
-        ui->CenterButton->setEnabled( true );
-	#ifdef HAVE_INDI_H
-        ui->ScopeButton->setEnabled( true );
-	#endif
-        ui->DetailsButton->setEnabled( true );
-        ui->AVTButton->setEnabled( true );
-        ui->RemoveButton->setEnabled( true );
-
-        //Find the selected object in the obsList,
-        //then break the loop.  Now obsList.current()
-        //points to the new selected object (until now it was the previous object)
-        bool found(false);
-        SkyObject *o;
-        foreach ( o, obsList() ) {
-            if ( o->translatedName() == newName ) {
-                found = true;
+    bool found = false;
+    singleSelection = false;
+    noSelection = false;
+    showScope = false;
+    ui->ImagePreview->clearPreview();
+    ui->ImagePreview->setCursor( Qt::ArrowCursor );
+    QFile file;
+    if ( KSUtils::openDataFile( file, "noimage.png" ) ) {
+       file.close();
+       ui->ImagePreview->showPreview( KUrl( file.fileName() ) );
+    } else
+        ui->ImagePreview->hide();
+    QModelIndexList selectedItems;
+    QString newName;
+    SkyObject *o;
+    ui->SaveImage->setEnabled( false );
+    ui->DeleteImage->setEnabled( false );
+    if( sessionView ) {
+        selectedItems = m_SortModelSession->mapSelectionToSource( ui->SessionView->selectionModel()->selection() ).indexes();
+        //When one object is selected
+        if ( selectedItems.size() == m_Session->columnCount() ) {
+            newName = selectedItems[0].data().toString();
+            singleSelection = true;
+            //Find the selected object in the SessionList,
+            //then break the loop.  Now SessionList.current()
+            //points to the new selected object (until now it was the previous object)
+            foreach ( o, sessionList() ) {
+                if ( o->translatedName() == newName ) {
+                    found = true;
+                    break;
+                }
+            }
+        }
+    } else {
+        selectedItems = m_SortModel->mapSelectionToSource( ui->TableView->selectionModel()->selection() ).indexes();
+        //When one object is selected
+        if ( selectedItems.size() == m_Model->columnCount() ) {
+            newName = selectedItems[0].data().toString();
+            singleSelection = true;
+            //Find the selected object in the obsList,
+            //then break the loop.  Now obsList.current()
+            //points to the new selected object (until now it was the previous object)
+            foreach ( o, obsList() ) {
+                if ( o->translatedName() == newName ) {
+                    found = true;
                 break;
+                }
             }
         }
+    }
+    if( singleSelection ) {
+        //Enable buttons
+        ui->ImagePreview->setCursor( Qt::PointingHandCursor );
+        #ifdef HAVE_INDI_H
+            showScope = true;
+        #endif
         if ( found ) {
             m_CurrentObject = o;
-
+            QPoint pos(0,0);
+            plot( o );
+            //Change the CurrentImage, DSS/SDSS Url to correspond to the new object
+            setCurrentImage( o );
+            ui->GoogleImage->setEnabled( true );
             if ( newName != i18n( "star" ) ) {
                 //Display the current object's user notes in the NotesEdit
                 //First, save the last object's user log to disk, if necessary
                 saveCurrentUserLog(); //uses LogObject, which is still the previous obj.
-
                 //set LogObject to the new selected object
                 LogObject = currentObject();
-
                 ui->NotesLabel->setEnabled( true );
                 ui->NotesEdit->setEnabled( true );
-
                 ui->NotesLabel->setText( i18n( "observing notes for %1:", LogObject->translatedName() ) );
                 if ( LogObject->userLog().isEmpty() ) {
-                    ui->NotesEdit->setPlainText( i18n("Record here observation logs and/or data on %1.", LogObject->translatedName() ) );
+                    ui->NotesEdit->setPlainText( i18n( "Record here observation logs and/or data on %1.", LogObject->translatedName() ) );
                 } else {
                     ui->NotesEdit->setPlainText( LogObject->userLog() );
                 }
+                if( sessionView ) {
+                    ui->TimeEdit->setEnabled( true );
+                    ui->SetTime->setEnabled( true );
+                    ui->TimeEdit->setTime( TimeHash.value( o->name(), o->transitTime( dt, geo ) ) );
+                }   
             } else { //selected object is named "star"
                 //clear the log text box
                 saveCurrentUserLog();
@@ -319,52 +517,57 @@
                 ui->NotesLabel->setEnabled( false );
                 ui->NotesEdit->clear();
                 ui->NotesEdit->setEnabled( false );
+                ui->GoogleImage->setEnabled( false );
             }
-
+            if( QFile( KStandardDirs::locateLocal( "appdata", CurrentImage ) ).size() > 13000 ) {//If the image is present, show it!
+                ui->ImagePreview->showPreview( KUrl( KStandardDirs::locateLocal( "appdata", CurrentImage ) ) );
+                ui->ImagePreview->show();
+                ui->SaveImage->setEnabled( false );
+                ui->DeleteImage->setEnabled( true );
+            } else if( QFile( KStandardDirs::locateLocal( "appdata", "Temp_" + CurrentImage ) ).size() > 13000 ) {
+                ui->ImagePreview->showPreview( KUrl( KStandardDirs::locateLocal( "appdata","Temp_" + CurrentImage ) ) );
+                ui->ImagePreview->show();
+                ui->SaveImage->setEnabled( true );
+                ui->DeleteImage->setEnabled( true );
+            }
         } else {
-            kDebug() << i18n( "Object %1 not found in observing ist.", newName );
+            kDebug() << i18n( "Object %1 not found in list.", newName );
         } 
-
-    } else if ( selectedItems.size() == 0 ) {
+    } else if ( selectedItems.size() == 0 ) {//Nothing selected
         //Disable buttons
-        ui->CenterButton->setEnabled( false );
-        ui->ScopeButton->setEnabled( false );
-        ui->DetailsButton->setEnabled( false );
-        ui->AVTButton->setEnabled( false );
-        ui->RemoveButton->setEnabled( false );
+        noSelection = true;
         ui->NotesLabel->setText( i18n( "Select an object to record notes on it here:" ) );
         ui->NotesLabel->setEnabled( false );
         ui->NotesEdit->setEnabled( false );
         m_CurrentObject = 0;
-
+        ui->TimeEdit->setEnabled( false );
+        ui->SetTime->setEnabled( false );
+        ui->GoogleImage->setEnabled( false );
         //Clear the user log text box.
         saveCurrentUserLog();
         ui->NotesEdit->setPlainText("");
-
+        //Clear the plot in the AVTPlotwidget
+        ui->View->removeAllPlotObjects();
     } else { //more than one object selected.
-        ui->CenterButton->setEnabled( false );
-        ui->ScopeButton->setEnabled( false );
-        ui->DetailsButton->setEnabled( false );
-        ui->AVTButton->setEnabled( true );
-        ui->RemoveButton->setEnabled( true );
-        ui->NotesLabel->setText( i18n( "Select an object to record notes on it here:" ) );
+        ui->NotesLabel->setText( i18n( "Select a single object to record notes on it here:" ) );
         ui->NotesLabel->setEnabled( false );
         ui->NotesEdit->setEnabled( false );
+        ui->TimeEdit->setEnabled( false );
+        ui->SetTime->setEnabled( false );
+        ui->GoogleImage->setEnabled( false );
         m_CurrentObject = 0;
-
+        //Clear the plot in the AVTPlotwidget
+        ui->View->removeAllPlotObjects();
         //Clear the user log text box.
         saveCurrentUserLog();
         ui->NotesEdit->setPlainText("");
     }
-
 }
 
 void ObservingList::slotCenterObject() {
-    if ( currentObject() ) {
-        ks->map()->setClickedObject( currentObject() );
-        ks->map()->setClickedPoint( currentObject() );
-        ks->map()->slotCenter();
-    }
+    ks->map()->setClickedObject( currentObject() );
+    ks->map()->setClickedPoint( currentObject() );
+    ks->map()->slotCenter();
 }
 
 void ObservingList::slotSlewToObject()
@@ -398,7 +601,7 @@
                     if (prop == NULL)
                         continue;
                     else
-                        selectedCoord = 1;		/* Select horizontal */
+                        selectedCoord = 1;      /* Select horizontal */
                 }
                 else
                     useJ2000 = true;
@@ -502,46 +705,100 @@
 //Should have one window whose target object changes with selection
 void ObservingList::slotDetails() {
     if ( currentObject() ) {
-        QPointer<DetailDialog> dd = new DetailDialog( currentObject(), ks->data()->lt(), ks->geo(), ks );
+        QPointer<DetailDialog> dd = new DetailDialog( currentObject(), ks->data()->lt(), geo, ks );
         dd->exec();
-	delete dd;
+    	delete dd;
     }
 }
 
-void ObservingList::slotAVT() {
+void ObservingList::slotWUT() {
+    QPointer<WUTDialog> w = new WUTDialog( ks, sessionView );
+    w->exec();
+    delete w;
+}
+
+void ObservingList::slotAddToSession() {
     QModelIndexList selectedItems = m_SortModel->mapSelectionToSource( ui->TableView->selectionModel()->selection() ).indexes();
-
     if ( selectedItems.size() ) {
-        QPointer<AltVsTime> avt = new AltVsTime( ks );
         foreach ( const QModelIndex &i, selectedItems ) {
             foreach ( SkyObject *o, obsList() ) {
                 if ( o->translatedName() == i.data().toString() )
-                    avt->processObject( o );
+                    slotAddObject( o, true );
+                }
+        }
+    }
+}
+
+void ObservingList::slotFind() {
+   QPointer<FindDialog> fd = new FindDialog( ks );    
+   if ( fd->exec() == QDialog::Accepted ) {
+       SkyObject *o = fd->selectedObject();
+       if( o != 0 ) {
+           slotAddObject( o, sessionView );  
+       }
+   }
+   delete fd;
+}
+
+void ObservingList::slotAVT() {
+    QModelIndexList selectedItems;
+    // TODO: Think and see if there's a more effecient way to do this. I can't seem to think of any, but this code looks like it could be improved. - Akarsh
+    if( sessionView ) {
+        QPointer<AltVsTime> avt = new AltVsTime( ks );//FIXME KStars class is singleton, so why pass it?
+        for ( int irow = m_Session->rowCount()-1; irow >= 0; --irow ) {
+            if ( ui->SessionView->selectionModel()->isRowSelected( irow, QModelIndex() ) ) {
+                QModelIndex mSortIndex = m_SortModelSession->index( irow, 0 );
+                QModelIndex mIndex = m_SortModelSession->mapToSource( mSortIndex );
+                int irow = mIndex.row();
+                QString ra = m_Session->item(irow, 1)->text();
+                QString dc = m_Session->item(irow, 2)->text();
+                foreach ( SkyObject *o, sessionList() ) {
+                    //Stars named "star" must be matched by coordinates
+                    if ( o->name() == "star" ) {
+                        if ( o->ra0()->toHMSString() == ra && o->dec0()->toDMSString() == dc ) {
+                            avt->processObject( o );
+                            break;
+                        }
+    
+                    } else if ( o->translatedName() == mIndex.data().toString() ) {
+                        avt->processObject( o );
+                        break;
+                    }
+                }
             }
         }
-
         avt->exec();
-	delete avt;
-    }
+	    delete avt;
+    } else {
+        selectedItems = m_SortModel->mapSelectionToSource( ui->TableView->selectionModel()->selection() ).indexes();
+        if ( selectedItems.size() ) {
+            QPointer<AltVsTime> avt = new AltVsTime( ks );//FIXME KStars class is singleton, so why pass it?
+            foreach ( const QModelIndex &i, selectedItems ) {
+                foreach ( SkyObject *o, obsList() )
+                    if ( o->translatedName() == i.data().toString() )
+                        avt->processObject( o );
+            }
+            avt->exec();
+	        delete avt;
+        }
+    }       
 }
 
 //FIXME: On close, we will need to close any open Details/AVT windows
 void ObservingList::slotClose() {
     //Save the current User log text
-    if ( currentObject() && ! ui->NotesEdit->toPlainText().isEmpty() && ui->NotesEdit->toPlainText()
-            != i18n("Record here observation logs and/or data on %1.", currentObject()->name()) ) {
-        currentObject()->saveUserLog( ui->NotesEdit->toPlainText() );
-    }
-
+    saveCurrentUserLog();
+    ui->View->removeAllPlotObjects();
+    slotNewSelection();
+    saveCurrentList();
     hide();
 }
 
 void ObservingList::saveCurrentUserLog() {
     if ( ! ui->NotesEdit->toPlainText().isEmpty() &&
             ui->NotesEdit->toPlainText() !=
-            i18n("Record here observation logs and/or data on %1.", LogObject->translatedName() ) ) {
+            i18n( "Record here observation logs and/or data on %1.", LogObject->translatedName() ) ) {
         LogObject->saveUserLog( ui->NotesEdit->toPlainText() );
-
         ui->NotesEdit->clear();
         ui->NotesLabel->setText( i18n( "Observing notes for object:" ) );
         LogObject = NULL;
@@ -551,7 +808,6 @@
 void ObservingList::slotOpenList() {
     KUrl fileURL = KFileDialog::getOpenUrl( QDir::homePath(), "*.obslist|KStars Observing List (*.obslist)" );
     QFile f;
-
     if ( fileURL.isValid() ) {
         if ( ! fileURL.isLocalFile() ) {
             //Save remote list to a temporary local file
@@ -567,22 +823,37 @@
             f.setFileName( FileName );
         }
 
-        if ( !f.open( QIODevice::ReadOnly) ) {
+        if ( ! f.open( QIODevice::ReadOnly) ) {
             QString message = i18n( "Could not open file %1", f.fileName() );
             KMessageBox::sorry( 0, message, i18n( "Could Not Open File" ) );
             return;
         }
-
-        saveCurrentList();
-        //First line is the name of the list.  The rest of the file should
-        //be object names, one per line.
-        QTextStream istream(&f);
+        saveCurrentList();//See if the current list needs to be saved before opening the new one
+        ui->tabWidget->setCurrentIndex(1);
+        slotChangeTab(1);
+        sessionList().clear();
+        TimeHash.clear();
+        m_CurrentObject = 0;
+        m_Session->removeRows( 0, m_Session->rowCount() );
+        //First line is the name of the list. The rest of the file is
+        //object names, one per line. With the TimeHash value if present
+        QTextStream istream( &f );
         QString line;
-        ListName = istream.readLine();
-
+        SessionName = istream.readLine();
+        line = istream.readLine();
+        if( ! line.contains( '|' ) ) {
+            SessionName = "";
+            KMessageBox::sorry( 0, i18n( "Old formatted Observing Lists are not supported " ), i18n( "Invalid List" ) );
+            return;
+        }
+        QStringList fields = line.split( '|' ); 
+        geo = ks->data()->locationNamed( fields[0], fields[1], fields[2] );
+        ui->SetLocation -> setText( geo -> fullName() );
+        dt.setDate( QDate::fromString( fields[3], "ddMMyyyy" ) );
+        ui->DateEdit->setDate( dt.date() );
         while ( ! istream.atEnd() ) {
             line = istream.readLine();
-
+            QStringList parts = line.split( '|' ); 
             //If the object is named "star", add it by coordinates
             SkyObject *o;
             if ( line.startsWith( QLatin1String( "star" ) ) ) {
@@ -593,109 +864,150 @@
                 double maxrad = 1000.0/Options::zoomFactor();
                 o = ks->data()->skyComposite()->starNearest( &p, maxrad );
             } else {
-                o = ks->data()->objectNamed( line );
+                o = ks->data()->objectNamed( parts[0] );
             }
-
-            //If we haven't identified the object, try interpreting the 
+            //If we still haven't identified the object, try interpreting the 
             //name as a star's genetive name (with ascii letters)
-            if ( !o ) o = ks->data()->skyComposite()->findStarByGenetiveName( line );
-
-            if ( o ) slotAddObject( o );
+            if ( ! o ) o = ks->data()->skyComposite()->findStarByGenetiveName( parts[0] );
+            if ( o ) {
+                slotAddObject( o, true );
+                //If present, add the Time value into the Hash
+                if( ! parts[1].isEmpty() ) TimeHash.insert( o->name(), QTime::fromString( parts[1], "hms ap" ) );
+            }
         }
-
+        //Update the location and user set times from file
+        slotUpdate();
         //Newly-opened list should not trigger isModified flag
         isModified = false;
-
         f.close();
-
-    } else if ( !fileURL.path().isEmpty() ) {
-        QString message = i18n( "The specified file is invalid.  Try another file?" );
-        if ( KMessageBox::warningYesNo( this, message, i18n("Invalid File"), KGuiItem(i18n("Try Another")), KGuiItem(i18n("Do Not Try")) ) == KMessageBox::Yes ) {
-            slotOpenList();
-        }
+    } else if ( ! fileURL.path().isEmpty() ) { 
+        KMessageBox::sorry( 0 , i18n( "The specified file is invalid" ) );
     }
 }
 
 void ObservingList::saveCurrentList() {
     //Before loading a new list, do we need to save the current one?
     //Assume that if the list is empty, then there's no need to save
-    if ( obsList().size() ) {
+    if ( sessionList().size() ) {
         if ( isModified ) {
-            QString message = i18n( "Do you want to save the current list before opening a new list?" );
+            QString message = i18n( "Do you want to save the current session?" );
             if ( KMessageBox::questionYesNo( this, message,
-                                             i18n( "Save Current List?" ), KStandardGuiItem::save(), KStandardGuiItem::discard() ) == KMessageBox::Yes )
-                slotSaveList();
+                                             i18n( "Save Current session?" ), KStandardGuiItem::save(), KStandardGuiItem::discard() ) == KMessageBox::Yes )
+                slotSaveSession();
         }
-
-        //If we ever allow merging the loaded list with
-        //the existing one, that code would go here
-
-        m_Model->clear();
-        obsList().clear();
-        m_CurrentObject = 0;
     }
 }
 
-void ObservingList::slotSaveListAs() {
+void ObservingList::slotSaveSessionAs() {
     bool ok(false);
-    ListName = KInputDialog::getText( i18n( "Enter List Name" ),
-                                      i18n( "List name:" ), QString(), &ok );
-
+    SessionName = KInputDialog::getText( i18n( "Enter Session Name" ),
+                                      i18n( "Session name:" ), QString(), &ok );
     if ( ok ) {
         KUrl fileURL = KFileDialog::getSaveUrl( QDir::homePath(), "*.obslist|KStars Observing List (*.obslist)" );
-
         if ( fileURL.isValid() )
             FileName = fileURL.path();
-
-        slotSaveList();
+        slotSaveSession();
     }
 }
 
 void ObservingList::slotSaveList() {
-    if ( ListName.isEmpty() || FileName.isEmpty() ) {
-        slotSaveListAs();
+    QFile f;
+    f.setFileName( KStandardDirs::locateLocal( "appdata", "wishlist.obslist" ) );   
+    if ( ! f.open( QIODevice::WriteOnly ) ) {
+        kDebug() << "Cannot write list to  file";
         return;
     }
+    QTextStream ostream( &f );
+    foreach ( SkyObject* o, obsList() ) {
+        if ( o->name() == "star" ) {
+            ostream << o->name() << "  " << o->ra0()->Hours() << "  " << o->dec0()->Degrees() << endl;
+        } else if ( o->type() == SkyObject::STAR ) {
+            StarObject *s = (StarObject*)o;
+            if ( s->name() == s->gname() ) 
+                ostream << s->name2() << endl;
+            else  
+                ostream << s->name() << endl;
+        } else {
+            ostream << o->name() << endl;
+        }
+    }
+    f.close();
+}
 
+void ObservingList::slotLoadWishList() {
+    QFile f;
+    f.setFileName( KStandardDirs::locateLocal( "appdata", "wishlist.obslist" ) );   
+    if ( ! f.open( QIODevice::ReadOnly) ) {
+       kDebug() << "No WishList Saved yet";
+       return;
+    }
+    QTextStream istream( &f );
+    QString line;
+    while ( ! istream.atEnd() ) {
+        line = istream.readLine();
+        //If the object is named "star", add it by coordinates
+        SkyObject *o;
+        if ( line.startsWith( QLatin1String( "star" ) ) ) {
+            QStringList fields = line.split( ' ', QString::SkipEmptyParts );
+            dms ra = dms::fromString( fields[1], false ); //false = hours
+            dms dc = dms::fromString( fields[2], true );  //true  = degrees
+            SkyPoint p( ra, dc );
+            double maxrad = 1000.0/Options::zoomFactor();
+            o = ks->data()->skyComposite()->starNearest( &p, maxrad );
+        } else {
+            o = ks->data()->objectNamed( line );
+        }
+        //If we haven't identified the object, try interpreting the 
+        //name as a star's genetive name (with ascii letters)
+        if ( ! o ) o = ks->data()->skyComposite()->findStarByGenetiveName( line );
+        if ( o ) slotAddObject( o, false, true );
+    }
+    f.close();
+}
+
+void ObservingList::slotSaveSession() {
+    if ( FileName.isEmpty() || SessionName.isEmpty()  ) {
+        slotSaveSessionAs();
+        return;
+    }
     QFile f( FileName );
-    if ( !f.open( QIODevice::WriteOnly) ) {
+    if( ! f.open( QIODevice::WriteOnly ) ) {
         QString message = i18n( "Could not open file %1.  Try a different filename?", f.fileName() );
-
         if ( KMessageBox::warningYesNo( 0, message, i18n( "Could Not Open File" ), KGuiItem(i18n("Try Different")), KGuiItem(i18n("Do Not Try")) ) == KMessageBox::Yes ) {
             FileName.clear();
-            slotSaveList();
+            slotSaveSessionAs();
         }
-        return;
+    return;
     }
-
-    QTextStream ostream(&f);
-    ostream << ListName << endl;
-    foreach ( SkyObject* o, obsList() ) {
+    QTextStream ostream( &f );
+    ostream << SessionName << endl;
+    ostream << geo->name() << "|" <<geo->province() << "|" << geo->country() << "|" << dt.date().toString("ddMMyyyy") << endl;
+    foreach ( SkyObject* o, sessionList() ) {
         if ( o->name() == "star" ) {
-            ostream << o->name() << "  " << o->ra()->Hours() << "  " << o->dec()->Degrees() << endl;
-        } else if ( o->type() == SkyObject::STAR ) {
-            StarObject *s = (StarObject*)o;
+            ostream << o->name() << "  " << o->ra0()->Hours() << "  " << o->dec0()->Degrees() << endl;
+        } else {
+            if ( o->type() == SkyObject::STAR ) {
+                StarObject *s = (StarObject*)o;
 
-            if ( s->name() == s->gname() ) {
-                ostream << s->name2() << endl;
-            } else { 
-                ostream << s->name() << endl;
+                if ( s->name() == s->gname() ) {
+                    ostream << s->name2() << "|";
+                } else { 
+                    ostream << s->name() << "|";
+                }
+            } else {
+                ostream << o->name() << "|";
             }
-        } else {
-            ostream << o->name() << endl;
+            if( TimeHash.value( o->name(), QTime(30,0,0) ).isValid() ) ostream << TimeHash.value( o->name() ).toString( "hms ap" );
+            ostream<<endl;
         }
     }
-
     f.close();
-    isModified = false;
+    isModified = false;//We've saved the session, so reset the modified flag.
 }
 
 void ObservingList::slotWizard() {
     QPointer<ObsListWizard> wizard = new ObsListWizard( ks );
     if ( wizard->exec() == QDialog::Accepted ) {
-        //Make sure current list is saved
-        saveCurrentList();
-
         foreach ( SkyObject *o, wizard->obsList() ) {
             slotAddObject( o );
         }
@@ -703,32 +1015,58 @@
     delete wizard;
 }
 
+void ObservingList::plot( SkyObject *o ) {
+    if( ! o ) return;
+    float DayOffset = 0;
+    if( TimeHash.value( o->name(), o->transitTime( dt, geo ) ).hour() > 12 )
+        DayOffset = 1;
+    KStarsDateTime ut = dt;
+    ut.setTime(QTime());
+    ut = geo->LTtoUT(ut);
+    ut = ut.addSecs( ( 0.5 + DayOffset ) * 86400.0 );
+    double h1 = geo->GSTtoLST( ut.gst() ).Hours();
+    if ( h1 > 12.0 ) h1 -= 24.0;
+    double h2 = h1 + 24.0;
+    ui->View->setSecondaryLimits( h1, h2, -90.0, 90.0 );
+    ksal->setLocation(geo);
+    ui->View->setSunRiseSetTimes( ksal->getSunRise(),ksal->getSunSet() );
+    ui->View->update();
+    KPlotObject *po = new KPlotObject( Qt::white, KPlotObject::Lines, 2.0 );
+    for ( double h = -12.0; h <= 12.0; h += 0.5 ) {
+        po->addPoint( h, findAltitude( o, ( h + DayOffset * 24.0 ) ) );
+    }
+    ui->View->removeAllPlotObjects();
+    ui->View->addPlotObject( po );
+}
+
+double ObservingList::findAltitude( SkyPoint *p, double hour ) {
+    KStarsDateTime ut = dt;
+    ut.setTime( QTime() );
+    ut = geo->LTtoUT( ut );
+    ut= ut.addSecs( hour*3600.0 );
+    dms LST = geo->GSTtoLST( ut.gst() );
+    p->EquatorialToHorizontal( &LST, geo->lat() );
+    return p->alt()->Degrees();
+}
+
 void ObservingList::slotToggleSize() {
     if ( isLarge() ) {
         ui->MiniButton->setIcon( KIcon("view-fullscreen") );
         //Abbreviate text on each button
-
-        ui->CenterButton->setText( i18nc( "First letter in 'Center'", "C" ) );
-        ui->ScopeButton->setText( i18nc( "First letter in 'Scope'", "S" ) );
-        ui->DetailsButton->setText( i18nc( "First letter in 'Details'", "D" ) );
-        ui->AVTButton->setText( i18nc( "First letter in 'Alt vs Time'", "A" ) );
-        ui->RemoveButton->setText( i18nc( "First letter in 'Remove'", "R" ) );
-
+        ui->FindButton->setText( i18nc( "First letter in 'Find'", "F" ) );
         //Hide columns 1-5
         ui->TableView->hideColumn(1);
         ui->TableView->hideColumn(2);
         ui->TableView->hideColumn(3);
         ui->TableView->hideColumn(4);
         ui->TableView->hideColumn(5);
-
         //Hide the headers
         ui->TableView->horizontalHeader()->hide();
         ui->TableView->verticalHeader()->hide();
-
         //Hide Observing notes
         ui->NotesLabel->hide();
         ui->NotesEdit->hide();
-
+        ui->View->hide();
         //Set the width of the Table to be the width of 5 toolbar buttons, 
         //or the width of column 1, whichever is larger
         int w = 5*ui->MiniButton->width();
@@ -737,41 +1075,331 @@
         } else {
             ui->TableView->setColumnWidth(0, w);
         }
-
         int left, right, top, bottom;
         ui->layout()->getContentsMargins( &left, &top, &right, &bottom );
-
         resize( w + left + right, height() );
-
         bIsLarge = false;
-
     } else {
-        ui->MiniButton->setIcon( KIcon("view-restore") );
-
+        ui->MiniButton->setIcon( KIcon( "view-restore" ) );
         //Show columns 1-5
         ui->TableView->showColumn(1);
         ui->TableView->showColumn(2);
         ui->TableView->showColumn(3);
         ui->TableView->showColumn(4);
         ui->TableView->showColumn(5);
-
         //Show the horizontal header
         ui->TableView->horizontalHeader()->show();
-
         //Expand text on each button
-        ui->CenterButton->setText( i18n( "Center" ) );
-        ui->ScopeButton->setText( i18n( "Scope" ) );
-        ui->DetailsButton->setText( i18n( "Details" ) );
-        ui->AVTButton->setText( i18n( "Alt vs Time" ) );
-        ui->RemoveButton->setText( i18n( "Remove" ) );
-
+        ui->WUTButton->setText( i18n( "WUT") );
+        ui->FindButton->setText( i18n( "Find &amp;Object") );
         //Show Observing notes
         ui->NotesLabel->show();
         ui->NotesEdit->show();
-
+        ui->View->show();
         adjustSize();
         bIsLarge = true;
     }
 }
 
+void ObservingList::slotChangeTab(int index) {
+    noSelection = true;
+    saveCurrentUserLog();
+    ui->NotesLabel->setText( i18n( "Select an object to record notes on it here:" ) );
+    ui->NotesLabel->setEnabled( false );
+    ui->NotesEdit->setEnabled( false );
+    ui->TimeEdit->setEnabled( false );
+    ui->SetTime->setEnabled( false );
+    ui->GoogleImage->setEnabled( false );
+    ui->SaveImage->setEnabled( false );
+    ui->DeleteImage->setEnabled( false );
+    m_CurrentObject = 0;
+    if( index ) {
+        sessionView = true;
+    } else {
+        sessionView = false;
+    }
+    setSaveImages();
+    ui->WizardButton->setEnabled( ! sessionView );//wizard adds only to the Wish List
+    //Clear the selection in the Tables
+    ui->TableView->clearSelection();
+    ui->SessionView->clearSelection();
+    //Clear the user log text box.
+    saveCurrentUserLog();
+    ui->NotesEdit->setPlainText("");
+    ui->View->removeAllPlotObjects();
+}
+
+void ObservingList::slotLocation() {
+    QPointer<LocationDialog> ld = new LocationDialog( (KStars*) topLevelWidget()->parent() );
+    if ( ld->exec() == QDialog::Accepted ) {
+        geo = ld->selectedCity();
+        ui->SetLocation -> setText( geo -> fullName() );
+    }
+    delete ld;
+}
+
+void ObservingList::slotUpdate() {
+    dt.setDate( ui->DateEdit->date() );
+    ui->View->removeAllPlotObjects();
+    //Creating a copy of the lists, we can't use the original lists as they'll keep getting modified as the loop iterates
+    QList<SkyObject*> _obsList=m_ObservingList, _SessionList=m_SessionList;
+    foreach ( SkyObject *o, _obsList ) {
+        if( o->name() != "star" ) {
+            slotRemoveObject( o, false, true );
+            slotAddObject( o, false, true );
+        }
+    }
+    foreach ( SkyObject *obj, _SessionList ) {
+        if( obj->name() != "star" ) {  
+            slotRemoveObject( obj, true, true );
+            slotAddObject( obj, true, true );
+        }
+    }
+}
+
+void ObservingList::slotSetTime() {
+    SkyObject *o = currentObject();
+    slotRemoveObject( o, true );
+    TimeHash [o->name()] = ui->TimeEdit->time();
+    slotAddObject( o, true, true );
+}
+
+void ObservingList::slotGetImage( bool _dss ) {
+    dss = _dss;
+    ui->GoogleImage->setEnabled( false );
+    ui->ImagePreview->clearPreview();
+    if( ! QFile::exists( KStandardDirs::locateLocal( "appdata", CurrentImage ) ) ) 
+        setCurrentImage( currentObject(), true );
+    QFile::remove( KStandardDirs::locateLocal( "appdata", CurrentImage ) );
+    KUrl url;
+    if( dss ) {
+        url.setUrl( DSSUrl );
+    } else {
+        url.setUrl( SDSSUrl );
+    }
+    downloadJob = KIO::copy ( url, KUrl( KStandardDirs::locateLocal( "appdata", CurrentImage ) ) );
+    connect ( downloadJob, SIGNAL ( result (KJob *) ), SLOT ( downloadReady() ) );
+}
+
+void ObservingList::downloadReady() {
+    // set downloadJob to 0, but don't delete it - the job will be deleted automatically
+    downloadJob = 0;
+    if( QFile( KStandardDirs::locateLocal( "appdata", CurrentImage ) ).size() > 13000 ) {//The default image is around 8689 bytes
+        ui->ImagePreview->showPreview( KUrl( KStandardDirs::locateLocal( "appdata", CurrentImage ) ) );
+        saveThumbImage();
+        ui->ImagePreview->show();
+        ui->ImagePreview->setCursor( Qt::PointingHandCursor );
+        if( CurrentImage.contains( "Temp" ) ) {
+            ImageList.append( CurrentImage );
+            ui->SaveImage->setEnabled( true );
+        }
+        ui->DeleteImage->setEnabled( true );
+    } 
+    else if( ! dss )
+        slotGetImage( true );
+}  
+
+void ObservingList::setCurrentImage( SkyObject *o, bool temp  ) {
+    QString RAString, DecString, RA, Dec;
+    RAString = RAString.sprintf( "%02d+%02d+%02d", o->ra0()->hour(), o->ra0()->minute(), o->ra0()->second() );
+    decsgn = '+';
+    if ( o->dec0()->Degrees() < 0.0 ) decsgn = '-';
+    int dd = abs( o->dec0()->degree() );
+    int dm = abs( o->dec0()->arcmin() );
+    int ds = abs( o->dec0()->arcsec() );
+    DecString = DecString.sprintf( "%c%02d+%02d+%02d", decsgn, dd, dm, ds );
+    RA = RA.sprintf( "ra=%f", o->ra0()->Degrees() );
+    Dec = Dec.sprintf( "&dec=%f", o->dec0()->Degrees() );
+    if( temp )
+        CurrentImage = "Temp_Image_" +  o->name().remove(' ');
+    else
+        CurrentImage = "Image_" +  o->name().remove(' ');
+    ThumbImage = "thumb-" + o->name().toLower().remove(' ') + ".png";
+    if( o->name() == "star" ) {
+        if( temp )
+            CurrentImage = "Temp_Image" + RAString + DecString;
+        else
+            CurrentImage = "Image" + RAString + DecString;
+        CurrentImage = CurrentImage.remove('+').remove('-') + decsgn;
+    }
+    CurrentImagePath = KStandardDirs::locateLocal( "appdata" , CurrentImage );
+    CurrentTempPath = KStandardDirs::locateLocal( "appdata", "Temp_" + CurrentImage );
+    QString UrlPrefix( "http://archive.stsci.edu/cgi-bin/dss_search?v=1" );
+    QString UrlSuffix( "&e=J2000&h=15.0&w=15.0&f=gif&c=none&fov=NONE" );
+    DSSUrl = UrlPrefix + "&r=" + RAString + "&d=" + DecString + UrlSuffix;
+    UrlPrefix = "http://casjobs.sdss.org/ImgCutoutDR6/getjpeg.aspx?";
+    UrlSuffix = "&scale=1.0&width=600&height=600&opt=GST&query=SR(10,20)";
+    SDSSUrl = UrlPrefix + RA + Dec + UrlSuffix;
+}
+
+void ObservingList::slotSaveImages() {
+    ui->GoogleImage->setEnabled( false );
+    ui->SaveImage->setEnabled( false );
+    ui->DeleteImage->setEnabled( false );
+    m_CurrentObject = 0;
+    //Clear the selection in the Tables
+    ui->TableView->clearSelection();
+    ui->SessionView->clearSelection();
+
+    if( sessionView ) {
+        foreach( SkyObject *o, sessionList() ) {
+            setCurrentImage( o );
+            QString img( CurrentImagePath  );
+            KUrl url( SDSSUrl );
+            if( ! o->isSolarSystem() )//TODO find a way for adding support for solar system images
+                saveImage( url, img );
+        }
+    } else {
+        foreach( SkyObject *o, obsList() ) {
+            setCurrentImage( o );
+            QString img( CurrentImagePath  );
+            KUrl url( SDSSUrl );
+            if( ! o->isSolarSystem() )//TODO find a way for adding support for solar system images
+                saveImage( url, img );
+        }
+    }
+}
+
+void ObservingList::saveImage( KUrl url, QString filename ) {
+    if( ! QFile::exists( CurrentImagePath  ) && ! QFile::exists( CurrentTempPath ) ) {
+        if(  KIO::NetAccess::download( url, filename, mainWidget() ) ) {
+            if( QFile( CurrentImagePath ).size() < 13000 ) {//The default image is around 8689 bytes
+                url = KUrl( DSSUrl );
+                KIO::NetAccess::download( url, filename, mainWidget() );
+            }
+            saveThumbImage();
+        }
+    } else if( QFile::exists( CurrentTempPath ) ) {
+        QFile f( CurrentTempPath );
+        f.rename( CurrentImagePath );
+    }
+}
+
+void ObservingList::slotSaveImage() {
+    setCurrentImage( currentObject() );
+    QFile f( CurrentTempPath);
+    f.rename( CurrentImagePath );
+    ui->SaveImage->setEnabled( false );
+}  
+
+void ObservingList::slotImageViewer() {
+    ImageViewer *iv;
+    if( QFile::exists( CurrentImagePath ) )
+        iv = new ImageViewer( CurrentImagePath );
+    else if( QFile::exists( CurrentTempPath ) )
+        iv = new ImageViewer( CurrentTempPath );
+    ivList.append( iv );
+    iv->show();
+}
+
+void ObservingList::slotDeleteImages() {
+    ui->ImagePreview->setCursor( Qt::ArrowCursor );
+    ui->GoogleImage->setEnabled( false );
+    ui->SaveImage->setEnabled( false );
+    ui->DeleteImage->setEnabled( false );
+    m_CurrentObject = 0;
+    //Clear the selection in the Tables
+    ui->TableView->clearSelection();
+    ui->SessionView->clearSelection();
+    ui->ImagePreview->clearPreview();
+    QDirIterator iterator( KStandardDirs::locateLocal( "appdata", "" ) );
+    while( iterator.hasNext() )
+    {
+        if( iterator.fileName().contains( "Image" ) && ( ! iterator.fileName().contains( "dat" ) ) && ( ! iterator.fileName().contains( "obslist" ) ) ) {
+            QFile file( iterator.filePath() );
+            file.remove();
+        }
+        iterator.next();
+    }
+}
+
+void ObservingList::setSaveImages() {
+    ui->saveImages->setEnabled( false );
+    if( sessionView ) {
+        if( ! sessionList().isEmpty() )
+            ui->saveImages->setEnabled( true );
+    } else {
+        if( ! obsList().isEmpty() )
+            ui->saveImages->setEnabled( true );
+    }
+}
+
+bool ObservingList::eventFilter( QObject *obj, QEvent *event ) {
+    if( obj == ui->ImagePreview ) {
+        if( event->type() == QEvent::MouseButtonRelease ) {
+            if( currentObject() ) {
+                if( ( ( QFile( CurrentImagePath ).size() < 13000 ) && (  QFile( CurrentTempPath ).size() < 13000 ) ) ) {
+                    if( ! currentObject()->isSolarSystem() )
+                        slotGetImage();
+                    else
+                        slotGoogleImage();
+                }
+                else
+                    slotImageViewer();
+            }
+            return true;
+        }
+    }
+    if( obj == ui->TableView->viewport() && ! noSelection ) {
+        if( event->type() == QEvent::MouseButtonRelease ) {
+            QMouseEvent *mouseEvent = static_cast<QMouseEvent* >(event);
+            if( mouseEvent->button() == Qt::RightButton ) {
+                QPoint pos( mouseEvent->globalX() , mouseEvent->globalY() );
+                if( singleSelection )
+                    pmenu->initPopupMenu( true, true, true, showScope, true, true );
+                else
+                    pmenu->initPopupMenu( true, false, false, false, true );
+                pmenu->popup( pos );
+                return true;
+            }
+        }
+    }
+    if( obj == ui->SessionView->viewport() && ! noSelection ) {
+        if( event->type() == QEvent::MouseButtonRelease ) {
+            QMouseEvent *mouseEvent = static_cast<QMouseEvent* >(event);
+            if( mouseEvent->button() == Qt::RightButton ) {
+                QPoint pos( mouseEvent->globalX() , mouseEvent->globalY() );
+                if( singleSelection )
+                    pmenu->initPopupMenu( false, true, true, showScope, true, true, true );
+                else
+                    pmenu->initPopupMenu( false, false, false, false, true, false, true );
+                pmenu->popup( pos );
+                return true;
+            }
+        }
+    }
+    return false;
+}
+
+void ObservingList::slotGoogleImage() {
+    QPixmap *pm = new QPixmap;
+    QPointer<ThumbnailPicker> tp = new ThumbnailPicker( currentObject(), *pm, this, 600, 600, "Image Chooser" );
+    if ( tp->exec() == QDialog::Accepted ) {
+        QFile f( CurrentImagePath );
+
+        //If a real image was set, save it.
+        if ( tp->imageFound() ) {
+            tp->image()->save( f.fileName(), "PNG" ); 
+            ui->ImagePreview->showPreview( KUrl( f.fileName() ) );
+            saveThumbImage();
+            slotNewSelection();
+        }
+    }
+    delete tp;
+}
+
+void ObservingList::slotDeleteImage() {
+    QFile::remove( CurrentImagePath );
+    QFile::remove( CurrentTempPath );
+    slotNewSelection();
+}
+
+void ObservingList::saveThumbImage() {
+    if( ! QFile::exists( KStandardDirs::locateLocal( "appdata", ThumbImage ) ) ) {
+        QImage img( CurrentImagePath );
+        img = img.scaled( 200, 200, Qt::IgnoreAspectRatio, Qt::SmoothTransformation );
+        img.save( KStandardDirs::locateLocal( "appdata", ThumbImage ) );
+    }
+}
+
 #include "observinglist.moc"
Index: kstars/thumbnailpicker.h
===================================================================
--- kstars/thumbnailpicker.h	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/thumbnailpicker.h	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -44,7 +44,7 @@
 {
     Q_OBJECT
 public:
-    ThumbnailPicker( SkyObject *o, const QPixmap &current, QWidget *parent=0 );
+    ThumbnailPicker( SkyObject *o, const QPixmap &current, QWidget *parent=0, double w = 200, double h= 200, QString cap = i18n ( "Choose Thumbnail Image" ) );
     ~ThumbnailPicker();
 
     QPixmap* image() { return Image; }
@@ -67,6 +67,7 @@
     void parseGooglePage( QStringList &ImList, const QString &URL );
 
     int SelectedImageIndex;
+    double wid, ht;
     ThumbnailPickerUI *ui;
     QPixmap *Image;
     DetailDialog *dd;
Index: kstars/obslistpopupmenu.cpp
===================================================================
--- kstars/obslistpopupmenu.cpp	(.../trunk/KDE/kdeedu/kstars)	(revision 0)
+++ kstars/obslistpopupmenu.cpp	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -0,0 +1,71 @@
+/***************************************************************************
+                          obslistpopupmenu.h  -  K Desktop Planetarium
+                             -------------------
+    begin                : Sun July 5 2009
+    copyright            : (C) 2008 by Prakash Mohan
+    email                : prak902000@gmail.com
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+
+#include "obslistpopupmenu.h"
+
+#include <KGlobal>
+#include <KLocale>
+
+#include "kstars.h"
+#include "kstarsdata.h"
+#include "skyobjects/skyobject.h"
+
+#include <config-kstars.h>
+
+ObsListPopupMenu::ObsListPopupMenu( KStars *_ks )
+        : KMenu( _ks ), ks(_ks)
+{}
+
+ObsListPopupMenu::~ObsListPopupMenu() { }
+
+void ObsListPopupMenu::initPopupMenu( bool showAddToSession, bool showCenter, bool showDetails, bool showScope, bool showRemove, bool showLinks, bool sessionView ) {
+
+    clear();
+    //Insert item for adding the object to the session view
+    if( showAddToSession )
+        addAction( i18n( "Add to session plan" ), ks->observingList(), SLOT( slotAddToSession() ) );
+    addSeparator();
+    //Insert item for centering on object
+    if( showCenter )
+        addAction( i18n( "Center" ), ks->observingList(), SLOT( slotCenterObject() ) );
+    //Insert item for Slewing to the object
+    if( showScope )
+        addAction( i18nc( "Show the selected object in the telescope", "Scope" ), ks->observingList(), SLOT( slotSlewToObject() ) );
+    addSeparator();
+    //Insert item for Showing details dialog
+    if( showDetails )
+        addAction( i18nc( "Show Detailed Information Dialog", "Details" ), ks->observingList(), SLOT( slotDetails() ) );
+    //Insert item for opening the Altitude vs time dialog
+    addAction( i18n( "Altitude vs. Time" ), ks->observingList(), SLOT( slotAVT() ) );
+    addSeparator();
+    //Insert item for dowloading different images
+    if( showLinks ) {
+        addAction( i18n( "Show SDSS image" ), ks->observingList(), SLOT( slotGetImage() ) );
+        addAction( i18n( "Show DSS image" ), ks->observingList(), SLOT( slotDSS() ) );
+        addAction( i18n( "Show images from web " ), ks->observingList(), SLOT( slotGoogleImage() ) );
+        addSeparator();
+    }
+    //Insert item for Removing the object(s)
+    if( showRemove ) {
+        if( ! sessionView )
+            addAction( i18n("Remove from WishList"), ks->observingList(), SLOT( slotRemoveSelectedObjects() ) );
+        else
+            addAction( i18n("Remove from Session Plan"), ks->observingList(), SLOT( slotRemoveSelectedObjects() ) );
+    }
+}
+
+#include "obslistpopupmenu.moc"
Index: kstars/thumbnaileditor.cpp
===================================================================
--- kstars/thumbnaileditor.cpp	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/thumbnaileditor.cpp	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -34,10 +34,13 @@
     setupUi( this );
 }
 
-ThumbnailEditor::ThumbnailEditor( ThumbnailPicker *_tp )
+ThumbnailEditor::ThumbnailEditor( ThumbnailPicker *_tp, double _w, double _h )
         : KDialog( _tp ),  tp( _tp )
 {
     ui = new ThumbnailEditorUI( this );
+    w = _w;
+    h = _h;
+    ui->MessageLabel->setText( i18n( "Crop region will be scaled to [ %1 * %2 ]", w, h) );
     setMainWidget( ui );
     setCaption( i18n( "Edit Thumbnail Image" ) );
     setButtons( KDialog::Ok|KDialog::Cancel );
@@ -60,7 +63,7 @@
 
 QPixmap ThumbnailEditor::thumbnail() {
     QImage im = ui->ImageCanvas->croppedImage().toImage();
-    im = im.scaled( 200, 200, Qt::IgnoreAspectRatio, Qt::SmoothTransformation );
+    im = im.scaled( w, h, Qt::IgnoreAspectRatio, Qt::SmoothTransformation );
     return QPixmap::fromImage( im );
 }
 
Index: kstars/ksalmanac.h
===================================================================
--- kstars/ksalmanac.h	(.../trunk/KDE/kdeedu/kstars)	(revision 0)
+++ kstars/ksalmanac.h	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -0,0 +1,59 @@
+/***************************************************************************
+                          ksalmanac.h  -  description
+
+                             -------------------
+    begin                : Friday May 8, 2009
+    copyright            : (C) 2009 by Prakash Mohan
+    email                : prak902000@gmail.com
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+
+#ifndef KSALMANAC_H_
+#define KSALMANAC_H_
+
+#include "skyobjects/kssun.h"
+#include "skyobjects/ksmoon.h"
+#include "geolocation.h"
+#include "kstars.h"
+#include "kstarsdatetime.h"
+#include "kstarsdata.h"
+class KSAlmanac {
+    public:
+        void RiseSetTime( SkyObject *o, double *riseTime, double *setTime, QTime *RiseTime, QTime *SetTime );
+        void setDate( KStarsDateTime *newdt );
+        void setLocation( GeoLocation *m_geo );
+        static KSAlmanac* Instance();
+        inline double getSunRise() { return SunRise; }
+        inline double getSunSet() { return SunSet; }
+        inline double getMoonRise() { return MoonRise; }
+        inline double getMoonSet() { return MoonSet; }
+        inline QTime sunRise() { return SunRiseT; }
+        inline QTime sunSet() { return SunSetT; }
+        inline QTime moonRise() { return MoonRiseT; }
+        inline QTime moonSet() { return MoonSetT; }
+        double getAstroTwilight( bool begin = true );
+        double getNauticalTwilight( bool begin = true );
+        double getCivilTwilight( bool begin = true );
+
+    private:
+        KSAlmanac(); 
+        void update();
+        static KSAlmanac *pinstance;
+        KSSun *m_Sun;
+        KSMoon *m_Moon;
+        KStars *ks;
+        KStarsDateTime dt;
+        GeoLocation *geo;
+        double SunRise, SunSet, MoonRise, MoonSet, riseRate;
+        QTime SunRiseT, SunSetT, MoonRiseT, MoonSetT;
+};
+
+#endif
Index: kstars/options/opsadvanced.ui
===================================================================
--- kstars/options/opsadvanced.ui	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/options/opsadvanced.ui	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -145,6 +145,19 @@
     </spacer>
    </item>
    <item>
+     <widget class="QCheckBox" name="kcfg_ObsListSaveImage" >
+     <property name="toolTip" >
+      <string>Save the downloaded DSS/SDSS images?</string>
+     </property>
+     <property name="whatsThis" >
+      <string>When the observing list, do you want the downloaded DSS/SDSS images to be saved or discarded?</string>
+     </property>
+     <property name="text" >
+      <string>Save downloaded images on exit</string>
+     </property>
+    </widget>
+   </item>
+   <item>
     <widget class="QCheckBox" name="kcfg_HideOnSlew" >
      <property name="toolTip" >
       <string>Do not draw all objects while the map is moving?</string>
Index: kstars/kstarsdcop.cpp
===================================================================
--- kstars/kstarsdcop.cpp	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/kstarsdcop.cpp	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -331,6 +331,7 @@
     if ( op == "ShowPlanetNames"    && bOk ) Options::setShowPlanetNames(    bVal );
     if ( op == "ShowPlanetImages"   && bOk ) Options::setShowPlanetImages(   bVal );
     if ( op == "HideOnSlew"  && bOk ) Options::setHideOnSlew(  bVal );
+    if ( op == "ObsListSaveImage"  && bOk ) Options::setObsListSaveImage(  bVal );
     if ( op == "HideStars"   && bOk ) Options::setHideStars(   bVal );
     if ( op == "HidePlanets" && bOk ) Options::setHidePlanets( bVal );
     if ( op == "HideMessier" && bOk ) Options::setHideMessier( bVal );
Index: kstars/thumbnailpicker.cpp
===================================================================
--- kstars/thumbnailpicker.cpp	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/thumbnailpicker.cpp	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -41,15 +41,17 @@
     setupUi( this );
 }
 
-ThumbnailPicker::ThumbnailPicker( SkyObject *o, const QPixmap &current, QWidget *parent )
+ThumbnailPicker::ThumbnailPicker( SkyObject *o, const QPixmap &current, QWidget *parent, double _w, double _h, QString cap )
         : KDialog( parent ), SelectedImageIndex(-1), dd((DetailDialog*)parent), Object(o), bImageFound( false )
 {
+    wid = _w;
+    ht = _h;
     Image = new QPixmap( current );
     ImageRect = new QRect( 0, 0, 200, 200 );
 
     ui = new ThumbnailPickerUI( this );
     setMainWidget( ui );
-    setCaption( i18n( "Choose Thumbnail Image" ) );
+    setCaption( cap );
     setButtons( KDialog::Ok|KDialog::Cancel );
 
     ui->CurrentImage->setPixmap( *Image );
@@ -240,7 +242,7 @@
 }
 
 void ThumbnailPicker::slotEditImage() {
-    QPointer<ThumbnailEditor> te = new ThumbnailEditor( this );
+    QPointer<ThumbnailEditor> te = new ThumbnailEditor( this, wid, ht );
     if ( te->exec() == QDialog::Accepted ) {
         QPixmap pm = te->thumbnail();
         *Image = pm;
@@ -277,8 +279,7 @@
     ui->CurrentImage->update();
     ui->EditButton->setEnabled( true );
 
-    //Set Image to the selected 200x200 pixmap
-    *Image = pm;
+    *Image = PixList[i]->scaled( wid, ht, Qt::IgnoreAspectRatio, Qt::SmoothTransformation ); 
     bImageFound = true;
 }
 
Index: kstars/obslistpopupmenu.h
===================================================================
--- kstars/obslistpopupmenu.h	(.../trunk/KDE/kdeedu/kstars)	(revision 0)
+++ kstars/obslistpopupmenu.h	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -0,0 +1,54 @@
+/***************************************************************************
+                          obslistpopupmenu.h  -  K Desktop Planetarium
+                             -------------------
+    begin                : Sun July 5 2009
+    copyright            : (C) 2008 by Prakash Mohan
+    email                : prak902000@gmail.com
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+
+
+#ifndef OBSLISTPOPUPMENU_H_
+#define OBSLISTPOPUPMENU_H_
+
+#include <kmenu.h>
+#include <kaction.h>
+
+class KStars;
+class StarObject;
+class SkyObject;
+class QLabel;
+
+/**@class ObsListPopupMenu
+	*The Popup Menu for the observing list in KStars. The menu is sensitive to the 
+	*type of selection in the observing list.
+    *@author Prakash Mohan
+    *@version 1.0
+	*/
+class ObsListPopupMenu : public KMenu
+{
+    Q_OBJECT
+public:
+    /**Default constructor*/
+    ObsListPopupMenu( KStars *_ks);
+
+    /**Destructor (empty)*/
+    ~ObsListPopupMenu();
+
+    /**Initialize the popup menus.
+        */
+    void initPopupMenu( bool showAddToSession = false, bool showCenter = false, bool showDetails = false, bool showScope = false, bool showRemove = false, bool showLinks = false, bool sessionView = false );
+
+private:
+    KStars *ks;
+};
+
+#endif
Index: kstars/thumbnaileditor.h
===================================================================
--- kstars/thumbnaileditor.h	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/thumbnaileditor.h	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -37,7 +37,7 @@
 {
     Q_OBJECT
 public:
-    ThumbnailEditor( ThumbnailPicker *_tp );
+    ThumbnailEditor( ThumbnailPicker *_tp, double _w, double _h );
     ~ThumbnailEditor();
     QPixmap thumbnail();
 
@@ -47,6 +47,7 @@
 private:
     ThumbnailEditorUI *ui;
     ThumbnailPicker *tp;
+    double w, h;
 
 };
 
Index: kstars/imageviewer.cpp
===================================================================
--- kstars/imageviewer.cpp	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/imageviewer.cpp	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -51,8 +51,7 @@
 ImageLabel::~ImageLabel()
 {}
 
-void ImageLabel::paintEvent (QPaintEvent */*ev*/)
-{
+void ImageLabel::paintEvent (QPaintEvent */*ev*/) {
     QPainter p;
     p.begin( this );
     int x = 0;
@@ -112,6 +111,36 @@
     loadImageFromURL();
 }
 
+ImageViewer::ImageViewer ( QString FileName )
+        : KDialog( KStars::Instance() ), ks( KStars::Instance() ), fileIsImage(true), downloadJob(0)
+{
+    setModal( false );
+    setCaption( i18n( "KStars image viewer" ) + QString( " : " ) + FileName );
+    setButtons( KDialog::Close );
+
+    Page = new QFrame( this );
+    setMainWidget( Page );
+    View = new ImageLabel( Page );
+    Caption = new QLabel( Page );
+    View->setAutoFillBackground( true );
+    //Reverse colors
+    QPalette p = palette();
+    p.setColor( QPalette::Window, palette().color( QPalette::WindowText ) );
+    p.setColor( QPalette::WindowText, palette().color( QPalette::Window ) );
+    Caption->setPalette( p );
+    View->setPalette( p );
+
+    vlay = new QVBoxLayout( Page );
+    vlay->setSpacing( 0 );
+    vlay->setMargin( 0 );
+    vlay->addWidget( View );
+    setWindowTitle ( FileName); // the title of the window
+
+    file.setFileName( FileName );
+    showImage();
+
+}
+
 ImageViewer::~ImageViewer() {
     // check if download job is running
     checkJob();
Index: kstars/kstars.h
===================================================================
--- kstars/kstars.h	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/kstars.h	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -50,6 +50,7 @@
 class JMoonTool;
 class ImageViewer;
 class FlagManager;
+class ObservingList;
 
 class OpsCatalog;
 class OpsGuides;
@@ -112,19 +113,19 @@
     inline static KStars *Instance() { return pinstance; }
 
     /**Destructor.  Synchs config file.  Deletes objects.
-    	*/
+        */
     ~KStars();
 
     /**@return pointer to KStarsData object which contains application data.
-    	*/
+        */
     KStarsData* data();
 
     /**@return pointer to the local sidereal time.
-    	*/
+        */
     dms* LST();
 
     /**@return pointer to SkyMap object which is the sky display widget.
-    	*/
+        */
     SkyMap* map();
 
     ObservingList* observingList();
@@ -133,89 +134,89 @@
     void removeImageViewer( ImageViewer* );
 
     /**@return pointer to GeoLocation object which is the current geographic location.
-    	*/
+        */
     GeoLocation* geo();
 
     /**@return pointer to InfoBoxes object.
-    	*/
+        */
     InfoBoxes* infoBoxes();
 
     inline KLed* diskLED() { return m_DiskLED; }
 
     /**@return pointer to the INDI driver
-    	*/
+        */
     INDIDriver* indiDriver() { return indidriver; }
 
     /**@return pointer to the INDI menu
-    	*/
+        */
     INDIMenu* indiMenu() { return indimenu; }
 
     /** Establish the INDI system. No GUI
-    	*/
+        */
     void establishINDI();
 
     /**Add an item to the color-scheme action manu
-    	*@param name The name to use in the menu
-    	*@param actionName The internal name for the action (derived from filename)
-    	*/
+        *@param name The name to use in the menu
+        *@param actionName The internal name for the action (derived from filename)
+        */
     void addColorMenuItem( const QString &name, const QString &actionName );
 
     /**Remove an item from the color-scheme action manu
-    	*@param actionName The internal name of the action (derived from filename)
-    	*/
+        *@param actionName The internal name of the action (derived from filename)
+        */
     void removeColorMenuItem( const QString &actionName );
 
     /**@short Apply config options throughout the program.
-    	*In most cases, options are set in the "Options" object directly, 
-    	*but for some things we have to manually react to config changes.
+        *In most cases, options are set in the "Options" object directly, 
+        *but for some things we have to manually react to config changes.
         *@param doApplyFocus If true, then focus posiiton will be set 
         *from config file
-    	*/
+        */
     void applyConfig( bool doApplyFocus = true );
 
 public Q_SLOTS:
     /**DBUS interface function.
-    	*Set focus to given Ra/Dec coordinates 
-    	*@param ra the Right Ascension coordinate for the focus (in Hours)
-    	*@param dec the Declination coordinate for the focus (in Degrees)
-    	*/
+        *Set focus to given Ra/Dec coordinates 
+        *@param ra the Right Ascension coordinate for the focus (in Hours)
+        *@param dec the Declination coordinate for the focus (in Degrees)
+        */
     Q_SCRIPTABLE Q_NOREPLY void setRaDec( double ra, double dec );
 
     /**DBUS interface function.
-    	*Set focus to given Alt/Az coordinates. 
-    	*@param alt the Altitude coordinate for the focus (in Degrees)
-    	*@param az the Azimuth coordinate for the focus (in Degrees)
-    	*/
+        *Set focus to given Alt/Az coordinates. 
+        *@param alt the Altitude coordinate for the focus (in Degrees)
+        *@param az the Azimuth coordinate for the focus (in Degrees)
+        */
     Q_SCRIPTABLE Q_NOREPLY void setAltAz(double alt, double az);
 
     /**DBUS interface function.
-    	*Point in the direction described by the string argument.  
-    	*@param direction either an object name, a compass direction (e.g., "north"), or "zenith"
-    	*/
+        *Point in the direction described by the string argument.  
+        *@param direction either an object name, a compass direction (e.g., "north"), or "zenith"
+        */
     Q_SCRIPTABLE Q_NOREPLY void lookTowards( const QString &direction );
 
     /**DBUS interface function.
-    	*Add a name label to the named object
-    	*@param name the name of the object to which the label will be attached
-    	*/
+        *Add a name label to the named object
+        *@param name the name of the object to which the label will be attached
+        */
     Q_SCRIPTABLE Q_NOREPLY void addLabel( const QString &name );
 
     /**DBUS interface function.
-    	*Remove a name label from the named object
-    	*@param name the name of the object from which the label will be removed
-    	*/
+        *Remove a name label from the named object
+        *@param name the name of the object from which the label will be removed
+        */
     Q_SCRIPTABLE Q_NOREPLY void removeLabel( const QString &name );
 
     /**DBUS interface function.
-    	*Add a trail to the named solar system body
-    	*@param name the name of the body to which the trail will be attached
-    	*/
+        *Add a trail to the named solar system body
+        *@param name the name of the body to which the trail will be attached
+        */
     Q_SCRIPTABLE Q_NOREPLY void addTrail( const QString &name );
 
     /**DBUS interface function.
-    	*Remove a trail from the named solar system body
-    	*@param name the name of the object from which the trail will be removed
-    	*/
+        *Remove a trail from the named solar system body
+        *@param name the name of the object from which the trail will be removed
+        */
     Q_SCRIPTABLE Q_NOREPLY void removeTrail( const QString &name );
 
     /**DBUS interface function.  Zoom in one step. */
@@ -228,303 +229,303 @@
     Q_SCRIPTABLE Q_NOREPLY void defaultZoom() { slotDefaultZoom(); }
 
     /**DBUS interface function.  Set zoom level to specified value.
-    	*@param z the zoom level.  Units are pixels per radian.
-    	*/
+        *@param z the zoom level.  Units are pixels per radian.
+        */
     Q_SCRIPTABLE Q_NOREPLY void zoom(double z);
 
     /**DBUS interface function.  Set local time and date.
-    	*@param yr year of date
-    	*@param mth month of date
-    	*@param day day of date
-    	*@param hr hour of time
-    	*@param min minute of time
-    	*@param sec second of time
-    	*/
+        *@param yr year of date
+        *@param mth month of date
+        *@param day day of date
+        *@param hr hour of time
+        *@param min minute of time
+        *@param sec second of time
+        */
     Q_SCRIPTABLE Q_NOREPLY void setLocalTime(int yr, int mth, int day, int hr, int min, int sec);
 
     /**DBUS interface function.  Delay further execution of DBUS commands.
-    	*@param t number of seconds to delay
-    	*/
+        *@param t number of seconds to delay
+        */
     Q_SCRIPTABLE Q_NOREPLY void waitFor( double t );
 
     /**DBUS interface function.  Pause further DBUS execution until a key is pressed.
-    	*@param k the key which will resume DBUS execution
-    	*/
+        *@param k the key which will resume DBUS execution
+        */
     Q_SCRIPTABLE Q_NOREPLY void waitForKey( const QString &k );
 
     /**DBUS interface function.  Toggle tracking.
-    	*@param track engage tracking if true; else disengage tracking
-    	*/
+        *@param track engage tracking if true; else disengage tracking
+        */
     Q_SCRIPTABLE Q_NOREPLY void setTracking( bool track );
 
     /**DBUS interface function.  modify a view option.
-    	*@param option the name of the option to be modified
-    	*@param value the option's new value
-    	*/
+        *@param option the name of the option to be modified
+        *@param value the option's new value
+        */
     Q_SCRIPTABLE Q_NOREPLY void changeViewOption( const QString &option, const QString &value );
 
     /**DBUS interface function.
-    	*@param name the name of the option to query
-    	*@return the current value of the named option
-    	*/
+        *@param name the name of the option to query
+        *@return the current value of the named option
+        */
     QString getOption( const QString &name );
 
     /**DBUS interface function.  Read config file.
-    	*This function is useful for restoring the user settings from the config file, 
-    	*after having modified the settings in memory.
-    	*@sa writeConfig()
-    	*/
+        *This function is useful for restoring the user settings from the config file, 
+        *after having modified the settings in memory.
+        *@sa writeConfig()
+        */
     Q_SCRIPTABLE Q_NOREPLY void readConfig();
 
     /**DBUS interface function.  Write current settings to config file.
-    	*This function is useful for storing user settings before modifying them with a DBUS
-    	*script.  The original settings can be restored with readConfig().
-    	*@sa readConfig()
-    	*/
+        *This function is useful for storing user settings before modifying them with a DBUS
+        *script.  The original settings can be restored with readConfig().
+        *@sa readConfig()
+        */
     Q_SCRIPTABLE Q_NOREPLY void writeConfig();
 
     /**DBUS interface function.  Show text message in a popup window.
-    	*@note Not Yet Implemented
-    	*@param x x-coordinate for message window
-    	*@param y y-coordinate for message window
-    	*@param message the text to display in the message window
-    	*/
+        *@note Not Yet Implemented
+        *@param x x-coordinate for message window
+        *@param y y-coordinate for message window
+        *@param message the text to display in the message window
+        */
     Q_SCRIPTABLE Q_NOREPLY void popupMessage( int x, int y, const QString &message );
 
     /**DBUS interface function.  Draw a line on the sky map.
-    	*@note Not Yet Implemented
-    	*@param x1 starting x-coordinate of line
-    	*@param y1 starting y-coordinate of line
-    	*@param x2 ending x-coordinate of line
-    	*@param y2 ending y-coordinate of line
-    	*@param speed speed at which line should appear from start to end points (in pixels per second)
-    	*/
+        *@note Not Yet Implemented
+        *@param x1 starting x-coordinate of line
+        *@param y1 starting y-coordinate of line
+        *@param x2 ending x-coordinate of line
+        *@param y2 ending y-coordinate of line
+        *@param speed speed at which line should appear from start to end points (in pixels per second)
+        */
     Q_SCRIPTABLE Q_NOREPLY void drawLine( int x1, int y1, int x2, int y2, int speed );
 
     /**DBUS interface function.  Set the geographic location.
-    	*@param city the city name of the location
-    	*@param province the province name of the location
-    	*@param country the country name of the location
-    	*/
+        *@param city the city name of the location
+        *@param province the province name of the location
+        *@param country the country name of the location
+        */
     Q_SCRIPTABLE Q_NOREPLY void setGeoLocation( const QString &city, const QString &province, const QString &country );
 
     /**DBUS interface function.  Modify a color.
-    	*@param colorName the name of the color to be modified (e.g., "SkyColor")
-    	*@param value the new color to use
-    	*/
+        *@param colorName the name of the color to be modified (e.g., "SkyColor")
+        *@param value the new color to use
+        */
     Q_SCRIPTABLE Q_NOREPLY void setColor( const QString &colorName, const QString &value );
 
     /**DBUS interface function.  Load a color scheme.
-    	*@param name the name of the color scheme to load (e.g., "Moonless Night")
-    	*/
+        *@param name the name of the color scheme to load (e.g., "Moonless Night")
+        */
     Q_SCRIPTABLE Q_NOREPLY void loadColorScheme( const QString &name );
 
     /**DBUS interface function.  Export the sky image to a file.
-    	*@param filename the filename for the exported image
-    	*@param width the width for the exported image
-    	*@param height the height for the exported image
-    	*/
+        *@param filename the filename for the exported image
+        *@param width the width for the exported image
+        *@param height the height for the exported image
+        */
     Q_SCRIPTABLE Q_NOREPLY void exportImage( const QString &filename, int width, int height );
 
     /**DBUS interface function.  Print the sky image.
-    	*@param usePrintDialog if true, the KDE print dialog will be shown; otherwise, default parameters will be used
-    	*@param useChartColors if true, the "Star Chart" color scheme will be used for the printout, which will save ink.
-    	*/
+        *@param usePrintDialog if true, the KDE print dialog will be shown; otherwise, default parameters will be used
+        *@param useChartColors if true, the "Star Chart" color scheme will be used for the printout, which will save ink.
+        */
     Q_SCRIPTABLE Q_NOREPLY void printImage( bool usePrintDialog, bool useChartColors );
 
     // TODO INDI Scripting to be supported in KDE 4.1
-	#if 0
+    #if 0
     /**DBUS interface function.  Establish an INDI driver.
-    	*@param deviceName The INDI device name
-    	*@param useLocal establish driver locally?
-    	*/
+        *@param deviceName The INDI device name
+        *@param useLocal establish driver locally?
+        */
     Q_SCRIPTABLE Q_NOREPLY void startINDI (const QString &deviceName, bool useLocal);
 
     /**DBUS interface function. Set current device. All subsequent functions will
-    	 communicate with this device until changed.
-    	 *@param deviceName The INDI device name
-    	*/
+         communicate with this device until changed.
+         *@param deviceName The INDI device name
+        */
     Q_SCRIPTABLE Q_NOREPLY void setINDIDevice (const QString &deviceName);
 
     /**DBUS interface function. Shutdown an INDI driver.
-    	*@param driverName the name of the driver to be shut down
-    	*/
+        *@param driverName the name of the driver to be shut down
+        */
     Q_SCRIPTABLE Q_NOREPLY void shutdownINDI (const QString &driverName);
 
     /**DBUS interface function.  Turn INDI driver on/off.
-    	*@param turnOn if true, turn driver on; otherwise turn off
-    	*/
+        *@param turnOn if true, turn driver on; otherwise turn off
+        */
     Q_SCRIPTABLE Q_NOREPLY void switchINDI(bool turnOn);
 
     /**DBUS interface function.  Set INDI connection port.
-    	*@param port the port identifier
-    	*/
+        *@param port the port identifier
+        */
     Q_SCRIPTABLE Q_NOREPLY void setINDIPort(const QString &port);
 
     /**DBUS interface function.  Set INDI target RA/DEC coordinates
-    	*@param RA the target's Right Ascension coordinate (in Hours) 
-    	*@param DEC the target's Declination coordinate (in Degrees) 
-    	*/
+        *@param RA the target's Right Ascension coordinate (in Hours) 
+        *@param DEC the target's Declination coordinate (in Degrees) 
+        */
     Q_SCRIPTABLE Q_NOREPLY void setINDITargetCoord(double RA, double DEC);
 
     /**DBUS interface function.  Set INDI target to a named object.
-    	*@param objectName the name of the object to be targeted
-    	*/
+        *@param objectName the name of the object to be targeted
+        */
     Q_SCRIPTABLE Q_NOREPLY void setINDITargetName(const QString &objectName);
 
     /**DBUS interface function.  Set INDI action.
-    	*@param action the action to set
-    	*/
+        *@param action the action to set
+        */
     Q_SCRIPTABLE Q_NOREPLY void setINDIAction(const QString &action);
 
     /**DBUS interface function.  Pause DBUS execution until named INDI action is completed.
-    	*@param action the action which is to be completed before resuming DBUS execution
-    	*/
+        *@param action the action which is to be completed before resuming DBUS execution
+        */
     Q_SCRIPTABLE Q_NOREPLY void waitForINDIAction(const QString &action);
 
     /**DBUS interface function.  Set INDI focus speed.
-    	*@param speed the speed to use
-    	*
-    	* @todo document units for speed
-    	*/
+        *@param speed the speed to use
+        *
+        * @todo document units for speed
+        */
     Q_SCRIPTABLE Q_NOREPLY void setINDIFocusSpeed(unsigned int speed);
 
     /**DBUS interface function.  Set INDI focus direction and focus.
-    	*@param focusDir 0 = focus in; 1 = focus out
-    	*/
+        *@param focusDir 0 = focus in; 1 = focus out
+        */
     Q_SCRIPTABLE Q_NOREPLY void startINDIFocus(int focusDir);
 
     /**DBUS interface function.  Set INDI geographical information.
-    	*@param longitude the longitude to set, in Degrees
-    	*@param latitude the latitude to set, in Degrees
-    	*/
+        *@param longitude the longitude to set, in Degrees
+        *@param latitude the latitude to set, in Degrees
+        */
     Q_SCRIPTABLE Q_NOREPLY void setINDIGeoLocation(double longitude, double latitude);
 
     /**DBUS interface function.  Sets focus operation timeout.
-    	*@param timeout the timeout interval, in seconds (?)
-    	*/
+        *@param timeout the timeout interval, in seconds (?)
+        */
     Q_SCRIPTABLE Q_NOREPLY void setINDIFocusTimeout(int timeout);
 
     /**DBUS interface function.  Start camera exposure with a timeout.
-    	*@param timeout the exposure time, in seconds (?)
-    	*/
+        *@param timeout the exposure time, in seconds (?)
+        */
     Q_SCRIPTABLE Q_NOREPLY void startINDIExposure(int timeout);
 
     /**DBUS interface function.  Set INDI UTC date and time.
-    	*@param UTCDateTime the UTC date and time (e.g., "23 June 2004 12:30:00" ?)
-    	*/
+        *@param UTCDateTime the UTC date and time (e.g., "23 June 2004 12:30:00" ?)
+        */
     Q_SCRIPTABLE Q_NOREPLY void setINDIUTC(const QString &UTCDateTime);
 
     /**DBUS interface function. Set INDI Telescope action.
-    	*@param action the action to set
-    	*/
+        *@param action the action to set
+        */
     Q_SCRIPTABLE Q_NOREPLY void setINDIScopeAction(const QString &action);
 
     /**DBUS interface function. Set CCD camera frame type.
-    	*@param type the frame type
-    	*/
+        *@param type the frame type
+        */
     Q_SCRIPTABLE Q_NOREPLY void setINDIFrameType(const QString &type);
 
     /**DBUS interface function. Set CCD filter.
-    	*@param filter_num identifier of the CCD filter
-    	*/
+        *@param filter_num identifier of the CCD filter
+        */
     Q_SCRIPTABLE Q_NOREPLY void setINDIFilterNum(int filter_num);
 
     /**DBUS interface function. Set CCD target temperature.
-    	*@param temp the target CCD temperature (in Celsius ?)
-    	*/
+        *@param temp the target CCD temperature (in Celsius ?)
+        */
     Q_SCRIPTABLE Q_NOREPLY void setINDICCDTemp(int temp);
 
-	#endif
+    #endif
 
     /**
-    	*Update time-dependent data and (possibly) repaint the sky map.
-    	*@param automaticDSTchange change DST status automatically?
-    	*/
+        *Update time-dependent data and (possibly) repaint the sky map.
+        *@param automaticDSTchange change DST status automatically?
+        */
     void updateTime( const bool automaticDSTchange = true );
 
     /**
-    	*Apply new settings and redraw skymap
-    	*/
+        *Apply new settings and redraw skymap
+        */
     void slotApplyConfigChanges();
 
     /**
-    	*action slot: Generate toolbars with new user-specified configuration
-    	*/
+        *action slot: Generate toolbars with new user-specified configuration
+        */
     void slotApplyToolbarConfig();
 
     /**
-    	* Zoom in by a given factor
+        * Zoom in by a given factor
         *
-    	*/
+        */
     void zoomIn( const double factor );
 
     /**
-    	* Zoom out by a given factor
+        * Zoom out by a given factor
         *
-    	*/
+        */
     void zoomOut( const double factor );
 
     /**
-    	*action slot: Zoom in one step
-    	*/
+        *action slot: Zoom in one step
+        */
     void slotZoomIn();
 
 
     /**
-    	*action slot: Zoom out one step
-    	*/
+        *action slot: Zoom out one step
+        */
     void slotZoomOut();
 
     /**
-    	*action slot: Set the zoom level to its default value
-    	*/
+        *action slot: Set the zoom level to its default value
+        */
     void slotDefaultZoom();
 
     /**
-    	*action slot: Allow user to specify a field-of-view angle for the display window in degrees, 
-    	*and set the zoom level accordingly.
-    	*/
+        *action slot: Allow user to specify a field-of-view angle for the display window in degrees, 
+        *and set the zoom level accordingly.
+        */
     void slotSetZoom();
     /**
-    	*action slot: Toggle whether kstars is tracking current position
-    	*/
+        *action slot: Toggle whether kstars is tracking current position
+        */
     void slotTrack();
 
     /**
-    	*action slot: open dialog for selecting a new geographic location
-    	*/
+        *action slot: open dialog for selecting a new geographic location
+        */
     void slotGeoLocator();
 
     /**Delete FindDialog because ObjNames list has changed in KStarsData due to
-    	*reloading star data. So list in FindDialog must be new filled with current data.
-    	*/
+        *reloading star data. So list in FindDialog must be new filled with current data.
+        */
     void clearCachedFindDialog();
 
     /**
-    	*Remove all trails which may have been added to solar system bodies
-    	*/
+        *Remove all trails which may have been added to solar system bodies
+        */
     void slotClearAllTrails();
 
 private slots:
     /**
-    	*action slot: sync kstars clock to system time
-    	*/
+        *action slot: sync kstars clock to system time
+        */
     void slotSetTimeToNow();
 
     /**
-    	*action slot: open a dialog for setting the time and date
-    	*/
+        *action slot: open a dialog for setting the time and date
+        */
     void slotSetTime();
 
     /**
-    	*action slot: toggle whether kstars clock is running or not
-    	*/
+        *action slot: toggle whether kstars clock is running or not
+        */
     void slotToggleTimer();
 
     /**
-    	*action slot: open dialog for finding a named object
-    	*/
+        *action slot: open dialog for finding a named object
+        */
     void slotFind();
 
     /**
@@ -617,8 +618,8 @@
     void slotINDIPanel();
 
     /**
-    	*action slot: open dialog for setting the view options
-    	*/
+        *action slot: open dialog for setting the view options
+        */
     void slotViewOps();
 
     /** finish setting up after the kstarsData has finished
@@ -650,12 +651,12 @@
     void slotManualFocus();
 
     /**Meta-slot to point the focus at special points (zenith, N, S, E, W).
-    	*Uses the name of the Action which sent the Signal to identify the
-    	*desired direction.  */
+        *Uses the name of the Action which sent the Signal to identify the
+        *desired direction.  */
     void slotPointFocus();
 
     /**Meta-slot to set the color scheme according to the name of the
-    	*Action which sent the activating signal.  */
+        *Action which sent the activating signal.  */
     void slotColorScheme();
 
     /**Select the Target symbol (a.k.a. field-of-view indicator) */
@@ -674,15 +675,15 @@
     void slotObsList();
 
     /**Meta-slot to handle display toggles for all of the viewtoolbar buttons.
-    	*uses the name of the sender to identify the item to change.  */
+        *uses the name of the sender to identify the item to change.  */
     void slotViewToolBar();
 
     /**Meta-slot to handle toggling display of GUI elements (toolbars and infoboxes)
-    	*uses name of the sender action to identify the widget to hide/show.  */
+        *uses name of the sender action to identify the widget to hide/show.  */
     void slotShowGUIItem( bool );
 
     /**Re-assign the input focus to the SkyMap widget.
-    	*/
+        */
     void mapGetsFocus();
 
     /**Toggle to and from full screen mode */
@@ -693,28 +694,28 @@
 
 private:
     /**
-    	*Initialize Menu bar, toolbars and all Actions.
-    	*/
+        *Initialize Menu bar, toolbars and all Actions.
+        */
     void initActions();
 
     /**
-    	*Initialize Field-of-View symbols and FOV submenu
-    	*/
+        *Initialize Field-of-View symbols and FOV submenu
+        */
     void initFOV();
 
     /**
-    	*Initialize Status bar.
-    	*/
+        *Initialize Status bar.
+        */
     void initStatusBar();
 
     /**
-    	*Initialize focus position
-    	*/
+        *Initialize focus position
+        */
     void initFocus();
 
     /**
-    	*Build the KStars main window
-    	*/
+        *Build the KStars main window
+        */
     void buildGUI();
 
     void reportZoom();
@@ -759,7 +760,7 @@
     OpsSolarSystem *opsolsys;
     OpsColors *opcolors;
     OpsAdvanced *opadvanced;
-    OpsINDI	*opsindi;
+    OpsINDI *opsindi;
 #ifdef HAVE_XPLANET
     OpsXplanet  *opsxplanet;
 #endif
Index: kstars/kstarsactions.cpp
===================================================================
--- kstars/kstarsactions.cpp	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/kstarsactions.cpp	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -1178,6 +1178,9 @@
     clearCachedFindDialog();
 
     delete AAVSODialog;
+    if( ! Options::obsListSaveImage() )
+        foreach ( QString file, obsList->imageList() )
+            QFile::remove( KStandardDirs::locateLocal( "appdata", file ) );
     delete obsList;
     if ( findDialog ) delete findDialog;
     if ( avt ) delete avt;
Index: kstars/CMakeLists.txt
===================================================================
--- kstars/CMakeLists.txt	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/CMakeLists.txt	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -102,9 +102,10 @@
 	tools/scriptargwidgets.cpp
 	tools/scriptbuilder.cpp
 	tools/scriptfunction.cpp
-        tools/skycalendar.cpp
+    tools/skycalendar.cpp
 	tools/wutdialog.cpp
 	tools/flagmanager.cpp
+
 	)
 
 kde4_add_ui_files(libkstarstools_SRCS
@@ -300,7 +301,7 @@
 	colorscheme.cpp	dms.cpp fov.cpp geolocation.cpp
 	imageviewer.cpp infobox.cpp infoboxes.cpp 
 	ksfilereader.cpp ksnumbers.cpp
-	kspopupmenu.cpp kstars.cpp 
+	kspopupmenu.cpp obslistpopupmenu.cpp kstars.cpp ksalmanac.cpp 
 	kstarsactions.cpp kstarsdata.cpp kstarsdatetime.cpp kstarsdcop.cpp kstarsinit.cpp 
 	kstarssplash.cpp ksutils.cpp kswizard.cpp main.cpp 
 	simclock.cpp skymap.cpp skymapdraw.cpp skymapevents.cpp
Index: kstars/kstars.kcfg
===================================================================
--- kstars/kstars.kcfg	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/kstars.kcfg	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -615,6 +615,11 @@
 			<whatsthis>Objects in the observing list will be highlighted with a colored name label in the map.</whatsthis>
 			<default>false</default>
 		</entry>
+        <entry name="ObsListSaveImage" type="Bool">
+            <label>Save the DSS/SDSS images to harddisk</label>
+            <whatisthis>The images of objects in the obseving list will be autosaved if you download them</whatisthis>
+            <default>false</default>
+        </entry>
 		<entry name="UseRefraction" type="Bool">
 			<label>Correct positions for atmospheric refraction?</label>
 			<whatsthis>Toggle whether object positions are corrected for the effects of atmospheric refraction (only applies when horizontal coordinates are used).</whatsthis>
Index: kstars/imageviewer.h
===================================================================
--- kstars/imageviewer.h	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/imageviewer.h	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -66,6 +66,8 @@
     /**Constructor. */
     ImageViewer (const KUrl &imageURL, const QString &capText, KStars *ks );
 
+    ImageViewer ( QString FileName );
+
     /**Destructor. If there is a partially downloaded image file, delete it.*/
     ~ImageViewer();
 
Index: kstars/skymapdraw.cpp
===================================================================
--- kstars/skymapdraw.cpp	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/skymapdraw.cpp	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -377,8 +377,8 @@
     int penWidth = int(m_Scale);
     psky.setPen( QPen( QColor( data->colorScheme()->colorNamed( "ObsListColor" ) ), penWidth ) );
 
-    if ( ks && ks->observingList()->obsList().size() ) {
-        foreach ( SkyObject* obj, ks->observingList()->obsList() ) {
+    if ( ks && ks->observingList()->sessionList().size() ) {
+        foreach ( SkyObject* obj, ks->observingList()->sessionList() ) {
             if ( checkVisibility( obj ) ) {
                 QPointF o = toScreen( obj );
 
Index: kstars/kspopupmenu.cpp
===================================================================
--- kstars/kspopupmenu.cpp	(.../trunk/KDE/kdeedu/kstars)	(revision 992843)
+++ kstars/kspopupmenu.cpp	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -275,9 +275,9 @@
 
     if ( showObsList && obj ) {
         if ( ks->observingList()->contains( obj ) )
-            addAction( i18n("Remove From List"), ks->observingList(), SLOT( slotRemoveObject() ) );
+            addAction( i18n("Remove From Observing WishList"), ks->observingList(), SLOT( slotRemoveObject() ) );
         else
-            addAction( i18n("Add to List"), ks->observingList(), SLOT( slotAddObject() ) );
+            addAction( i18n("Add to Observing WishList"), ks->observingList(), SLOT( slotAddObject() ) );
     }
 
     if ( showTrail && obj && obj->isSolarSystem() ) {
Index: kstars/ksalmanac.cpp
===================================================================
--- kstars/ksalmanac.cpp	(.../trunk/KDE/kdeedu/kstars)	(revision 0)
+++ kstars/ksalmanac.cpp	(.../branches/kstars/summer/kstars)	(revision 992843)
@@ -0,0 +1,116 @@
+/***************************************************************************
+                          ksalmanac.cpp  -  description
+
+                             -------------------
+    begin                : Friday May 8, 2009
+    copyright            : (C) 2009 by Prakash Mohan
+    email                : prak902000@gmail.com
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+
+#include "ksalmanac.h"
+
+#include <math.h>
+
+#include "skyobjects/kssun.h"
+#include "skyobjects/ksmoon.h"
+#include "geolocation.h"
+#include "kstars.h"
+#include "kstarsdatetime.h"
+#include "ksnumbers.h"
+#include "dms.h"
+#include "skyobjects/skyobject.h"
+
+KSAlmanac* KSAlmanac::pinstance=NULL;
+
+KSAlmanac* KSAlmanac::Instance() {
+    if(!pinstance) pinstance = new KSAlmanac;
+    return pinstance;
+}
+
+KSAlmanac::KSAlmanac() {
+    ks = KStars::Instance();
+    dt = KStarsDateTime::currentDateTime();
+    geo = ks->geo();
+    dt.setTime(QTime());
+    dt = geo->LTtoUT(dt);
+    m_Sun = new KSSun;
+    m_Moon = new KSMoon;
+    SunRise=SunSet=MoonRise=MoonSet=0;
+    update();
+    riseRate = 4.0/ m_Sun->dec()->cos()/14400.0;
+}
+
+void KSAlmanac::update() {
+    RiseSetTime( m_Sun, &SunRise, &SunSet, &SunRiseT, &SunSetT );
+    RiseSetTime( m_Moon, &MoonRise, &MoonSet, &MoonRiseT, &MoonSetT );
+}
+void KSAlmanac::RiseSetTime( SkyObject *o, double *riseTime, double *setTime, QTime *RiseTime, QTime *SetTime ) {
+    //Compute Sun rise and set times
+    const KStarsDateTime today = dt;
+    const GeoLocation* _geo = geo;
+    *RiseTime = o->riseSetTime( today.addDays(1), _geo, true );
+    *SetTime = o->riseSetTime( today, _geo, false );
+    *riseTime = -1.0 * RiseTime->secsTo(QTime()) / 86400.0; 
+    *setTime = -1.0 * SetTime->secsTo(QTime()) / 86400.0;
+  //check to see if Sun is circumpolar
+    //requires temporary repositioning of Sun to target date
+    KSNumbers *num = new KSNumbers( dt.djd() );
+    KSNumbers *oldNum = new KSNumbers( ks->data()->ut().djd() );
+    dms LST = geo->GSTtoLST( dt.gst() );
+    o->updateCoords( num, true, geo->lat(), &LST );
+    if ( o->checkCircumpolar( geo->lat() ) ) {
+        if ( o->alt()->Degrees() > 0.0 ) {
+            //Circumpolar, signal it this way:
+            *riseTime = 0.0;
+            *setTime = 1.0;
+        } else {
+            //never rises, signal it this way:
+            *riseTime = 0.0;
+            *setTime = -1.0;
+        }
+    }
+    o->updateCoords( oldNum, true, ks->geo()->lat(), ks->LST() );
+    o->EquatorialToHorizontal( ks->LST(), ks->geo()->lat() );
+    delete num;
+    delete oldNum;
+
+}
+
+void KSAlmanac::setDate( KStarsDateTime *newdt ) {
+    dt = *newdt; 
+    update();
+}
+
+void KSAlmanac::setLocation( GeoLocation *m_geo ) {
+    geo = m_geo;
+    update();
+}
+
+/*TODO This way calculated twilights are longer than real. Moreover solution always
+exists even if sun never goes below 6/12/18 degrees.
+Right way to do this is to find when Sun goes above/below -6/12/18 deg. as done
+in SkyObject::riseSetTime.
+    */
+double KSAlmanac::getAstroTwilight( bool begin ) {
+    if(begin) return ( SunRise - 18 * riseRate ); 
+    return ( SunSet + 18 * riseRate );
+} 
+
+double KSAlmanac::getNauticalTwilight( bool begin ) {
+    if(begin) return ( SunRise - 12 * riseRate ); 
+    return ( SunSet + 12 * riseRate );
+}
+
+double KSAlmanac::getCivilTwilight( bool begin ) {
+    if(begin) return ( SunRise - 6 * riseRate ); 
+    return ( SunSet + 6 * riseRate );
+}

Property changes on: .
___________________________________________________________________
Modified: svnmerge-integrated
   - /branches/kstars/unfrozen/kstars:1-822093,823176-826602,826607-826609,826612,826614-826640,826642-827470,827472-827647,827649-829108,829110-829310,829312-829464
   + /trunk/KDE/kdeedu/kstars:1-992839 /branches/kstars/unfrozen/kstars:1-822093,823176-826602,826607-826609,826612,826614-826640,826642-827470,827472-827647,827649-829108,829110-829310,829312-829464

